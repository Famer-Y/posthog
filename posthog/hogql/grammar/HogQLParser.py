# Generated from HogQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,149,1113,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,1,0,5,
        0,158,8,0,10,0,12,0,161,9,0,1,0,1,0,1,1,1,1,3,1,167,8,1,1,2,1,2,
        3,2,171,8,2,1,3,1,3,1,3,1,3,1,3,3,3,178,8,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,5,5,191,8,5,10,5,12,5,194,9,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,3,6,204,8,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,3,8,216,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,3,11,232,8,11,1,11,1,11,1,11,1,12,1,12,5,12,
        239,8,12,10,12,12,12,242,9,12,1,12,1,12,1,13,1,13,1,13,3,13,249,
        8,13,1,13,3,13,252,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,
        261,8,15,10,15,12,15,264,9,15,1,16,1,16,1,16,3,16,269,8,16,1,16,
        1,16,1,17,1,17,1,17,1,17,5,17,277,8,17,10,17,12,17,280,9,17,1,18,
        1,18,1,18,1,18,1,18,1,18,3,18,288,8,18,1,19,3,19,291,8,19,1,19,1,
        19,3,19,295,8,19,1,19,3,19,298,8,19,1,19,1,19,3,19,302,8,19,1,19,
        3,19,305,8,19,1,19,3,19,308,8,19,1,19,3,19,311,8,19,1,19,3,19,314,
        8,19,1,19,1,19,3,19,318,8,19,1,19,1,19,3,19,322,8,19,1,19,3,19,325,
        8,19,1,19,3,19,328,8,19,1,19,3,19,331,8,19,1,19,1,19,3,19,335,8,
        19,1,19,3,19,338,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,347,
        8,21,1,22,1,22,1,22,1,23,3,23,353,8,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,
        372,8,24,10,24,12,24,375,9,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,391,8,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,
        408,8,31,1,31,1,31,1,31,1,31,3,31,414,8,31,1,31,1,31,1,31,1,31,3,
        31,420,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,431,
        8,31,3,31,433,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
        3,34,444,8,34,1,34,3,34,447,8,34,1,34,1,34,1,34,1,34,3,34,453,8,
        34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,461,8,34,1,34,1,34,1,34,1,
        34,5,34,467,8,34,10,34,12,34,470,9,34,1,35,3,35,473,8,35,1,35,1,
        35,1,35,3,35,478,8,35,1,35,3,35,481,8,35,1,35,3,35,484,8,35,1,35,
        1,35,3,35,488,8,35,1,35,1,35,3,35,492,8,35,1,35,3,35,495,8,35,3,
        35,497,8,35,1,35,3,35,500,8,35,1,35,1,35,3,35,504,8,35,1,35,1,35,
        3,35,508,8,35,1,35,3,35,511,8,35,3,35,513,8,35,3,35,515,8,35,1,36,
        1,36,1,36,3,36,520,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,3,37,531,8,37,1,38,1,38,1,38,1,38,3,38,537,8,38,1,39,1,39,1,
        39,5,39,542,8,39,10,39,12,39,545,9,39,1,40,1,40,3,40,549,8,40,1,
        40,1,40,3,40,553,8,40,1,40,1,40,3,40,557,8,40,1,41,1,41,1,41,1,41,
        3,41,563,8,41,3,41,565,8,41,1,42,1,42,1,42,5,42,570,8,42,10,42,12,
        42,573,9,42,1,43,1,43,1,43,1,43,1,44,3,44,580,8,44,1,44,3,44,583,
        8,44,1,44,3,44,586,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
        1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,605,8,48,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,619,
        8,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        5,51,633,8,51,10,51,12,51,636,9,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,5,51,645,8,51,10,51,12,51,648,9,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,5,51,657,8,51,10,51,12,51,660,9,51,1,51,1,51,1,51,1,51,
        1,51,3,51,667,8,51,1,51,1,51,3,51,671,8,51,1,52,1,52,1,52,5,52,676,
        8,52,10,52,12,52,679,9,52,1,53,1,53,1,53,3,53,684,8,53,1,53,1,53,
        1,53,1,53,1,53,4,53,691,8,53,11,53,12,53,692,1,53,1,53,3,53,697,
        8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,721,8,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,738,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,750,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,760,8,53,1,53,3,53,763,8,53,1,53,1,53,3,53,767,8,53,1,53,3,
        53,770,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,3,53,783,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,3,53,800,8,53,1,53,1,53,3,53,804,8,53,
        1,53,1,53,1,53,1,53,3,53,810,8,53,1,53,1,53,1,53,1,53,1,53,3,53,
        817,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
        829,8,53,1,53,1,53,3,53,833,8,53,1,53,3,53,836,8,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,3,53,845,8,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,859,8,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,886,8,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,3,53,895,8,53,5,53,897,8,53,10,53,12,
        53,900,9,53,1,54,1,54,1,54,5,54,905,8,54,10,54,12,54,908,9,54,1,
        55,1,55,3,55,912,8,55,1,56,1,56,1,56,1,56,5,56,918,8,56,10,56,12,
        56,921,9,56,1,56,1,56,1,56,1,56,1,56,5,56,928,8,56,10,56,12,56,931,
        9,56,3,56,933,8,56,1,56,1,56,1,56,1,57,1,57,1,57,5,57,941,8,57,10,
        57,12,57,944,9,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,952,8,57,10,
        57,12,57,955,9,57,1,57,1,57,3,57,959,8,57,1,57,1,57,1,57,1,57,1,
        57,3,57,966,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
        58,1,58,3,58,979,8,58,1,59,1,59,1,59,5,59,984,8,59,10,59,12,59,987,
        9,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,999,
        8,60,1,61,1,61,1,61,1,61,3,61,1005,8,61,1,61,3,61,1008,8,61,1,62,
        1,62,1,62,5,62,1013,8,62,10,62,12,62,1016,9,62,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,3,63,1027,8,63,1,63,1,63,1,63,1,63,3,
        63,1033,8,63,5,63,1035,8,63,10,63,12,63,1038,9,63,1,64,1,64,1,64,
        3,64,1043,8,64,1,64,1,64,1,65,1,65,1,65,3,65,1050,8,65,1,65,1,65,
        1,66,1,66,1,66,5,66,1057,8,66,10,66,12,66,1060,9,66,1,67,1,67,1,
        68,1,68,1,68,1,68,1,68,1,68,3,68,1070,8,68,3,68,1072,8,68,1,69,3,
        69,1075,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1083,8,69,1,70,1,
        70,1,70,3,70,1088,8,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,3,
        74,1098,8,74,1,75,1,75,1,75,3,75,1103,8,75,1,76,1,76,1,76,1,76,1,
        77,1,77,1,77,1,77,1,77,0,3,68,106,126,78,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,0,16,2,0,17,17,71,71,2,0,42,
        42,49,49,3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,77,77,2,0,49,49,70,70,2,
        0,1,1,4,4,2,0,7,7,21,22,2,0,28,28,47,47,2,0,68,68,73,73,3,0,10,10,
        48,48,86,86,2,0,39,39,50,50,1,0,104,105,2,0,115,115,135,135,7,0,
        20,20,36,36,52,53,67,67,75,75,93,93,99,99,11,0,1,19,21,28,30,35,
        37,40,42,51,55,55,57,66,68,74,76,91,94,95,97,98,4,0,19,19,28,28,
        37,37,46,46,1242,0,159,1,0,0,0,2,166,1,0,0,0,4,170,1,0,0,0,6,172,
        1,0,0,0,8,181,1,0,0,0,10,187,1,0,0,0,12,203,1,0,0,0,14,205,1,0,0,
        0,16,208,1,0,0,0,18,217,1,0,0,0,20,223,1,0,0,0,22,227,1,0,0,0,24,
        236,1,0,0,0,26,251,1,0,0,0,28,253,1,0,0,0,30,257,1,0,0,0,32,268,
        1,0,0,0,34,272,1,0,0,0,36,287,1,0,0,0,38,290,1,0,0,0,40,339,1,0,
        0,0,42,342,1,0,0,0,44,348,1,0,0,0,46,352,1,0,0,0,48,358,1,0,0,0,
        50,376,1,0,0,0,52,379,1,0,0,0,54,382,1,0,0,0,56,392,1,0,0,0,58,395,
        1,0,0,0,60,399,1,0,0,0,62,432,1,0,0,0,64,434,1,0,0,0,66,437,1,0,
        0,0,68,452,1,0,0,0,70,514,1,0,0,0,72,519,1,0,0,0,74,530,1,0,0,0,
        76,532,1,0,0,0,78,538,1,0,0,0,80,546,1,0,0,0,82,564,1,0,0,0,84,566,
        1,0,0,0,86,574,1,0,0,0,88,579,1,0,0,0,90,587,1,0,0,0,92,591,1,0,
        0,0,94,595,1,0,0,0,96,604,1,0,0,0,98,618,1,0,0,0,100,620,1,0,0,0,
        102,670,1,0,0,0,104,672,1,0,0,0,106,803,1,0,0,0,108,901,1,0,0,0,
        110,911,1,0,0,0,112,932,1,0,0,0,114,965,1,0,0,0,116,978,1,0,0,0,
        118,980,1,0,0,0,120,998,1,0,0,0,122,1007,1,0,0,0,124,1009,1,0,0,
        0,126,1026,1,0,0,0,128,1039,1,0,0,0,130,1049,1,0,0,0,132,1053,1,
        0,0,0,134,1061,1,0,0,0,136,1071,1,0,0,0,138,1074,1,0,0,0,140,1087,
        1,0,0,0,142,1089,1,0,0,0,144,1091,1,0,0,0,146,1093,1,0,0,0,148,1097,
        1,0,0,0,150,1102,1,0,0,0,152,1104,1,0,0,0,154,1108,1,0,0,0,156,158,
        3,2,1,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,
        1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,5,0,0,1,163,1,1,
        0,0,0,164,167,3,6,3,0,165,167,3,12,6,0,166,164,1,0,0,0,166,165,1,
        0,0,0,167,3,1,0,0,0,168,171,3,106,53,0,169,171,3,26,13,0,170,168,
        1,0,0,0,170,169,1,0,0,0,171,5,1,0,0,0,172,173,5,92,0,0,173,177,3,
        150,75,0,174,175,5,112,0,0,175,176,5,119,0,0,176,178,3,4,2,0,177,
        174,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,5,144,0,0,180,
        7,1,0,0,0,181,182,3,150,75,0,182,183,5,112,0,0,183,184,5,119,0,0,
        184,185,3,4,2,0,185,186,5,144,0,0,186,9,1,0,0,0,187,192,3,150,75,
        0,188,189,5,113,0,0,189,191,3,150,75,0,190,188,1,0,0,0,191,194,1,
        0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,11,1,0,0,0,194,192,1,0,
        0,0,195,204,3,20,10,0,196,204,3,14,7,0,197,204,3,16,8,0,198,204,
        3,18,9,0,199,204,3,22,11,0,200,204,3,8,4,0,201,204,3,20,10,0,202,
        204,3,24,12,0,203,195,1,0,0,0,203,196,1,0,0,0,203,197,1,0,0,0,203,
        198,1,0,0,0,203,199,1,0,0,0,203,200,1,0,0,0,203,201,1,0,0,0,203,
        202,1,0,0,0,204,13,1,0,0,0,205,206,3,4,2,0,206,207,5,144,0,0,207,
        15,1,0,0,0,208,209,5,38,0,0,209,210,5,127,0,0,210,211,3,4,2,0,211,
        212,5,143,0,0,212,215,3,12,6,0,213,214,5,24,0,0,214,216,3,12,6,0,
        215,213,1,0,0,0,215,216,1,0,0,0,216,17,1,0,0,0,217,218,5,96,0,0,
        218,219,5,127,0,0,219,220,3,4,2,0,220,221,5,143,0,0,221,222,3,12,
        6,0,222,19,1,0,0,0,223,224,5,69,0,0,224,225,3,4,2,0,225,226,5,144,
        0,0,226,21,1,0,0,0,227,228,5,29,0,0,228,229,3,150,75,0,229,231,5,
        127,0,0,230,232,3,10,5,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,
        1,0,0,0,233,234,5,143,0,0,234,235,3,24,12,0,235,23,1,0,0,0,236,240,
        5,125,0,0,237,239,3,2,1,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,
        1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,
        5,141,0,0,244,25,1,0,0,0,245,252,1,0,0,0,246,248,5,125,0,0,247,249,
        3,30,15,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,252,
        5,141,0,0,251,245,1,0,0,0,251,246,1,0,0,0,252,27,1,0,0,0,253,254,
        3,4,2,0,254,255,5,112,0,0,255,256,3,4,2,0,256,29,1,0,0,0,257,262,
        3,28,14,0,258,259,5,113,0,0,259,261,3,28,14,0,260,258,1,0,0,0,261,
        264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,31,1,0,0,0,264,262,
        1,0,0,0,265,269,3,34,17,0,266,269,3,38,19,0,267,269,3,114,57,0,268,
        265,1,0,0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,
        271,5,0,0,1,271,33,1,0,0,0,272,278,3,36,18,0,273,274,5,90,0,0,274,
        275,5,1,0,0,275,277,3,36,18,0,276,273,1,0,0,0,277,280,1,0,0,0,278,
        276,1,0,0,0,278,279,1,0,0,0,279,35,1,0,0,0,280,278,1,0,0,0,281,288,
        3,38,19,0,282,283,5,127,0,0,283,284,3,34,17,0,284,285,5,143,0,0,
        285,288,1,0,0,0,286,288,3,154,77,0,287,281,1,0,0,0,287,282,1,0,0,
        0,287,286,1,0,0,0,288,37,1,0,0,0,289,291,3,40,20,0,290,289,1,0,0,
        0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,5,76,0,0,293,295,5,23,
        0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,3,42,
        21,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,3,104,
        52,0,300,302,3,44,22,0,301,300,1,0,0,0,301,302,1,0,0,0,302,304,1,
        0,0,0,303,305,3,46,23,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,
        1,0,0,0,306,308,3,50,25,0,307,306,1,0,0,0,307,308,1,0,0,0,308,310,
        1,0,0,0,309,311,3,52,26,0,310,309,1,0,0,0,310,311,1,0,0,0,311,313,
        1,0,0,0,312,314,3,54,27,0,313,312,1,0,0,0,313,314,1,0,0,0,314,317,
        1,0,0,0,315,316,5,98,0,0,316,318,7,0,0,0,317,315,1,0,0,0,317,318,
        1,0,0,0,318,321,1,0,0,0,319,320,5,98,0,0,320,322,5,85,0,0,321,319,
        1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,325,3,56,28,0,324,323,
        1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,328,3,48,24,0,327,326,
        1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,331,3,58,29,0,330,329,
        1,0,0,0,330,331,1,0,0,0,331,334,1,0,0,0,332,335,3,62,31,0,333,335,
        3,64,32,0,334,332,1,0,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,337,
        1,0,0,0,336,338,3,66,33,0,337,336,1,0,0,0,337,338,1,0,0,0,338,39,
        1,0,0,0,339,340,5,98,0,0,340,341,3,118,59,0,341,41,1,0,0,0,342,343,
        5,84,0,0,343,346,5,105,0,0,344,345,5,98,0,0,345,347,5,81,0,0,346,
        344,1,0,0,0,346,347,1,0,0,0,347,43,1,0,0,0,348,349,5,32,0,0,349,
        350,3,68,34,0,350,45,1,0,0,0,351,353,7,1,0,0,352,351,1,0,0,0,352,
        353,1,0,0,0,353,354,1,0,0,0,354,355,5,5,0,0,355,356,5,45,0,0,356,
        357,3,104,52,0,357,47,1,0,0,0,358,359,5,97,0,0,359,360,3,150,75,
        0,360,361,5,6,0,0,361,362,5,127,0,0,362,363,3,88,44,0,363,373,5,
        143,0,0,364,365,5,113,0,0,365,366,3,150,75,0,366,367,5,6,0,0,367,
        368,5,127,0,0,368,369,3,88,44,0,369,370,5,143,0,0,370,372,1,0,0,
        0,371,364,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,
        0,374,49,1,0,0,0,375,373,1,0,0,0,376,377,5,66,0,0,377,378,3,106,
        53,0,378,51,1,0,0,0,379,380,5,95,0,0,380,381,3,106,53,0,381,53,1,
        0,0,0,382,383,5,34,0,0,383,390,5,11,0,0,384,385,7,0,0,0,385,386,
        5,127,0,0,386,387,3,104,52,0,387,388,5,143,0,0,388,391,1,0,0,0,389,
        391,3,104,52,0,390,384,1,0,0,0,390,389,1,0,0,0,391,55,1,0,0,0,392,
        393,5,35,0,0,393,394,3,106,53,0,394,57,1,0,0,0,395,396,5,61,0,0,
        396,397,5,11,0,0,397,398,3,78,39,0,398,59,1,0,0,0,399,400,5,61,0,
        0,400,401,5,11,0,0,401,402,3,104,52,0,402,61,1,0,0,0,403,404,5,51,
        0,0,404,407,3,106,53,0,405,406,5,113,0,0,406,408,3,106,53,0,407,
        405,1,0,0,0,407,408,1,0,0,0,408,413,1,0,0,0,409,410,5,98,0,0,410,
        414,5,81,0,0,411,412,5,11,0,0,412,414,3,104,52,0,413,409,1,0,0,0,
        413,411,1,0,0,0,413,414,1,0,0,0,414,433,1,0,0,0,415,416,5,51,0,0,
        416,419,3,106,53,0,417,418,5,98,0,0,418,420,5,81,0,0,419,417,1,0,
        0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,5,58,0,0,422,423,3,106,
        53,0,423,433,1,0,0,0,424,425,5,51,0,0,425,426,3,106,53,0,426,427,
        5,58,0,0,427,430,3,106,53,0,428,429,5,11,0,0,429,431,3,104,52,0,
        430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,403,1,0,0,0,
        432,415,1,0,0,0,432,424,1,0,0,0,433,63,1,0,0,0,434,435,5,58,0,0,
        435,436,3,106,53,0,436,65,1,0,0,0,437,438,5,78,0,0,438,439,3,84,
        42,0,439,67,1,0,0,0,440,441,6,34,-1,0,441,443,3,126,63,0,442,444,
        5,27,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,447,
        3,76,38,0,446,445,1,0,0,0,446,447,1,0,0,0,447,453,1,0,0,0,448,449,
        5,127,0,0,449,450,3,68,34,0,450,451,5,143,0,0,451,453,1,0,0,0,452,
        440,1,0,0,0,452,448,1,0,0,0,453,468,1,0,0,0,454,455,10,3,0,0,455,
        456,3,72,36,0,456,457,3,68,34,4,457,467,1,0,0,0,458,460,10,4,0,0,
        459,461,3,70,35,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,
        0,462,463,5,45,0,0,463,464,3,68,34,0,464,465,3,74,37,0,465,467,1,
        0,0,0,466,454,1,0,0,0,466,458,1,0,0,0,467,470,1,0,0,0,468,466,1,
        0,0,0,468,469,1,0,0,0,469,69,1,0,0,0,470,468,1,0,0,0,471,473,7,2,
        0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,0,0,0,474,481,5,42,
        0,0,475,477,5,42,0,0,476,478,7,2,0,0,477,476,1,0,0,0,477,478,1,0,
        0,0,478,481,1,0,0,0,479,481,7,2,0,0,480,472,1,0,0,0,480,475,1,0,
        0,0,480,479,1,0,0,0,481,515,1,0,0,0,482,484,7,3,0,0,483,482,1,0,
        0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,487,7,4,0,0,486,488,5,62,
        0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,497,1,0,0,0,489,491,7,4,
        0,0,490,492,5,62,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,494,1,0,
        0,0,493,495,7,3,0,0,494,493,1,0,0,0,494,495,1,0,0,0,495,497,1,0,
        0,0,496,483,1,0,0,0,496,489,1,0,0,0,497,515,1,0,0,0,498,500,7,5,
        0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,503,5,33,
        0,0,502,504,5,62,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,513,1,0,
        0,0,505,507,5,33,0,0,506,508,5,62,0,0,507,506,1,0,0,0,507,508,1,
        0,0,0,508,510,1,0,0,0,509,511,7,5,0,0,510,509,1,0,0,0,510,511,1,
        0,0,0,511,513,1,0,0,0,512,499,1,0,0,0,512,505,1,0,0,0,513,515,1,
        0,0,0,514,480,1,0,0,0,514,496,1,0,0,0,514,512,1,0,0,0,515,71,1,0,
        0,0,516,517,5,16,0,0,517,520,5,45,0,0,518,520,5,113,0,0,519,516,
        1,0,0,0,519,518,1,0,0,0,520,73,1,0,0,0,521,522,5,59,0,0,522,531,
        3,104,52,0,523,524,5,91,0,0,524,525,5,127,0,0,525,526,3,104,52,0,
        526,527,5,143,0,0,527,531,1,0,0,0,528,529,5,91,0,0,529,531,3,104,
        52,0,530,521,1,0,0,0,530,523,1,0,0,0,530,528,1,0,0,0,531,75,1,0,
        0,0,532,533,5,74,0,0,533,536,3,82,41,0,534,535,5,58,0,0,535,537,
        3,82,41,0,536,534,1,0,0,0,536,537,1,0,0,0,537,77,1,0,0,0,538,543,
        3,80,40,0,539,540,5,113,0,0,540,542,3,80,40,0,541,539,1,0,0,0,542,
        545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,79,1,0,0,0,545,543,
        1,0,0,0,546,548,3,106,53,0,547,549,7,6,0,0,548,547,1,0,0,0,548,549,
        1,0,0,0,549,552,1,0,0,0,550,551,5,57,0,0,551,553,7,7,0,0,552,550,
        1,0,0,0,552,553,1,0,0,0,553,556,1,0,0,0,554,555,5,15,0,0,555,557,
        5,107,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,81,1,0,0,0,558,565,
        3,154,77,0,559,562,3,138,69,0,560,561,5,145,0,0,561,563,3,138,69,
        0,562,560,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,558,1,0,0,
        0,564,559,1,0,0,0,565,83,1,0,0,0,566,571,3,86,43,0,567,568,5,113,
        0,0,568,570,3,86,43,0,569,567,1,0,0,0,570,573,1,0,0,0,571,569,1,
        0,0,0,571,572,1,0,0,0,572,85,1,0,0,0,573,571,1,0,0,0,574,575,3,150,
        75,0,575,576,5,119,0,0,576,577,3,140,70,0,577,87,1,0,0,0,578,580,
        3,90,45,0,579,578,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,583,
        3,92,46,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,586,
        3,94,47,0,585,584,1,0,0,0,585,586,1,0,0,0,586,89,1,0,0,0,587,588,
        5,64,0,0,588,589,5,11,0,0,589,590,3,104,52,0,590,91,1,0,0,0,591,
        592,5,61,0,0,592,593,5,11,0,0,593,594,3,78,39,0,594,93,1,0,0,0,595,
        596,7,8,0,0,596,597,3,96,48,0,597,95,1,0,0,0,598,605,3,98,49,0,599,
        600,5,9,0,0,600,601,3,98,49,0,601,602,5,2,0,0,602,603,3,98,49,0,
        603,605,1,0,0,0,604,598,1,0,0,0,604,599,1,0,0,0,605,97,1,0,0,0,606,
        607,5,18,0,0,607,619,5,72,0,0,608,609,5,89,0,0,609,619,5,65,0,0,
        610,611,5,89,0,0,611,619,5,30,0,0,612,613,3,138,69,0,613,614,5,65,
        0,0,614,619,1,0,0,0,615,616,3,138,69,0,616,617,5,30,0,0,617,619,
        1,0,0,0,618,606,1,0,0,0,618,608,1,0,0,0,618,610,1,0,0,0,618,612,
        1,0,0,0,618,615,1,0,0,0,619,99,1,0,0,0,620,621,3,106,53,0,621,622,
        5,0,0,1,622,101,1,0,0,0,623,671,3,150,75,0,624,625,3,150,75,0,625,
        626,5,127,0,0,626,627,3,150,75,0,627,634,3,102,51,0,628,629,5,113,
        0,0,629,630,3,150,75,0,630,631,3,102,51,0,631,633,1,0,0,0,632,628,
        1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,637,
        1,0,0,0,636,634,1,0,0,0,637,638,5,143,0,0,638,671,1,0,0,0,639,640,
        3,150,75,0,640,641,5,127,0,0,641,646,3,152,76,0,642,643,5,113,0,
        0,643,645,3,152,76,0,644,642,1,0,0,0,645,648,1,0,0,0,646,644,1,0,
        0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,650,5,143,
        0,0,650,671,1,0,0,0,651,652,3,150,75,0,652,653,5,127,0,0,653,658,
        3,102,51,0,654,655,5,113,0,0,655,657,3,102,51,0,656,654,1,0,0,0,
        657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,
        660,658,1,0,0,0,661,662,5,143,0,0,662,671,1,0,0,0,663,664,3,150,
        75,0,664,666,5,127,0,0,665,667,3,104,52,0,666,665,1,0,0,0,666,667,
        1,0,0,0,667,668,1,0,0,0,668,669,5,143,0,0,669,671,1,0,0,0,670,623,
        1,0,0,0,670,624,1,0,0,0,670,639,1,0,0,0,670,651,1,0,0,0,670,663,
        1,0,0,0,671,103,1,0,0,0,672,677,3,106,53,0,673,674,5,113,0,0,674,
        676,3,106,53,0,675,673,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,
        678,1,0,0,0,678,105,1,0,0,0,679,677,1,0,0,0,680,681,6,53,-1,0,681,
        683,5,12,0,0,682,684,3,106,53,0,683,682,1,0,0,0,683,684,1,0,0,0,
        684,690,1,0,0,0,685,686,5,94,0,0,686,687,3,106,53,0,687,688,5,80,
        0,0,688,689,3,106,53,0,689,691,1,0,0,0,690,685,1,0,0,0,691,692,1,
        0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,695,5,
        24,0,0,695,697,3,106,53,0,696,694,1,0,0,0,696,697,1,0,0,0,697,698,
        1,0,0,0,698,699,5,25,0,0,699,804,1,0,0,0,700,701,5,13,0,0,701,702,
        5,127,0,0,702,703,3,106,53,0,703,704,5,6,0,0,704,705,3,102,51,0,
        705,706,5,143,0,0,706,804,1,0,0,0,707,708,5,19,0,0,708,804,5,107,
        0,0,709,710,5,43,0,0,710,711,3,106,53,0,711,712,3,142,71,0,712,804,
        1,0,0,0,713,714,5,79,0,0,714,715,5,127,0,0,715,716,3,106,53,0,716,
        717,5,32,0,0,717,720,3,106,53,0,718,719,5,31,0,0,719,721,3,106,53,
        0,720,718,1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,722,723,5,143,
        0,0,723,804,1,0,0,0,724,725,5,82,0,0,725,804,5,107,0,0,726,727,5,
        87,0,0,727,728,5,127,0,0,728,729,7,9,0,0,729,730,5,107,0,0,730,731,
        5,32,0,0,731,732,3,106,53,0,732,733,5,143,0,0,733,804,1,0,0,0,734,
        735,3,150,75,0,735,737,5,127,0,0,736,738,3,104,52,0,737,736,1,0,
        0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,740,5,143,0,0,740,741,1,
        0,0,0,741,742,5,63,0,0,742,743,5,127,0,0,743,744,3,88,44,0,744,745,
        5,143,0,0,745,804,1,0,0,0,746,747,3,150,75,0,747,749,5,127,0,0,748,
        750,3,104,52,0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,
        752,5,143,0,0,752,753,1,0,0,0,753,754,5,63,0,0,754,755,3,150,75,
        0,755,804,1,0,0,0,756,762,3,150,75,0,757,759,5,127,0,0,758,760,3,
        104,52,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,763,
        5,143,0,0,762,757,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,766,
        5,127,0,0,765,767,5,23,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,769,
        1,0,0,0,768,770,3,108,54,0,769,768,1,0,0,0,769,770,1,0,0,0,770,771,
        1,0,0,0,771,772,5,143,0,0,772,804,1,0,0,0,773,804,3,114,57,0,774,
        804,3,140,70,0,775,776,5,115,0,0,776,804,3,106,53,18,777,778,5,55,
        0,0,778,804,3,106,53,12,779,780,3,130,65,0,780,781,5,117,0,0,781,
        783,1,0,0,0,782,779,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,
        804,5,109,0,0,785,786,5,127,0,0,786,787,3,34,17,0,787,788,5,143,
        0,0,788,804,1,0,0,0,789,790,5,127,0,0,790,791,3,106,53,0,791,792,
        5,143,0,0,792,804,1,0,0,0,793,794,5,127,0,0,794,795,3,104,52,0,795,
        796,5,143,0,0,796,804,1,0,0,0,797,799,5,126,0,0,798,800,3,104,52,
        0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,804,5,142,
        0,0,802,804,3,122,61,0,803,680,1,0,0,0,803,700,1,0,0,0,803,707,1,
        0,0,0,803,709,1,0,0,0,803,713,1,0,0,0,803,724,1,0,0,0,803,726,1,
        0,0,0,803,734,1,0,0,0,803,746,1,0,0,0,803,756,1,0,0,0,803,773,1,
        0,0,0,803,774,1,0,0,0,803,775,1,0,0,0,803,777,1,0,0,0,803,782,1,
        0,0,0,803,785,1,0,0,0,803,789,1,0,0,0,803,793,1,0,0,0,803,797,1,
        0,0,0,803,802,1,0,0,0,804,898,1,0,0,0,805,809,10,17,0,0,806,810,
        5,109,0,0,807,810,5,145,0,0,808,810,5,134,0,0,809,806,1,0,0,0,809,
        807,1,0,0,0,809,808,1,0,0,0,810,811,1,0,0,0,811,897,3,106,53,18,
        812,816,10,16,0,0,813,817,5,135,0,0,814,817,5,115,0,0,815,817,5,
        114,0,0,816,813,1,0,0,0,816,814,1,0,0,0,816,815,1,0,0,0,817,818,
        1,0,0,0,818,897,3,106,53,17,819,844,10,15,0,0,820,845,5,118,0,0,
        821,845,5,119,0,0,822,845,5,130,0,0,823,845,5,128,0,0,824,845,5,
        129,0,0,825,845,5,120,0,0,826,845,5,121,0,0,827,829,5,55,0,0,828,
        827,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,832,5,40,0,0,831,
        833,5,14,0,0,832,831,1,0,0,0,832,833,1,0,0,0,833,845,1,0,0,0,834,
        836,5,55,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,
        845,7,10,0,0,838,845,5,139,0,0,839,845,5,140,0,0,840,845,5,132,0,
        0,841,845,5,123,0,0,842,845,5,124,0,0,843,845,5,131,0,0,844,820,
        1,0,0,0,844,821,1,0,0,0,844,822,1,0,0,0,844,823,1,0,0,0,844,824,
        1,0,0,0,844,825,1,0,0,0,844,826,1,0,0,0,844,828,1,0,0,0,844,835,
        1,0,0,0,844,838,1,0,0,0,844,839,1,0,0,0,844,840,1,0,0,0,844,841,
        1,0,0,0,844,842,1,0,0,0,844,843,1,0,0,0,845,846,1,0,0,0,846,897,
        3,106,53,16,847,848,10,13,0,0,848,849,5,133,0,0,849,897,3,106,53,
        14,850,851,10,11,0,0,851,852,5,2,0,0,852,897,3,106,53,12,853,854,
        10,10,0,0,854,855,5,60,0,0,855,897,3,106,53,11,856,858,10,9,0,0,
        857,859,5,55,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,
        860,861,5,9,0,0,861,862,3,106,53,0,862,863,5,2,0,0,863,864,3,106,
        53,10,864,897,1,0,0,0,865,866,10,8,0,0,866,867,5,136,0,0,867,868,
        3,106,53,0,868,869,5,112,0,0,869,870,3,106,53,8,870,897,1,0,0,0,
        871,872,10,21,0,0,872,873,5,126,0,0,873,874,3,106,53,0,874,875,5,
        142,0,0,875,897,1,0,0,0,876,877,10,20,0,0,877,878,5,117,0,0,878,
        897,5,105,0,0,879,880,10,19,0,0,880,881,5,117,0,0,881,897,3,150,
        75,0,882,883,10,14,0,0,883,885,5,44,0,0,884,886,5,55,0,0,885,884,
        1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,897,5,56,0,0,888,894,
        10,7,0,0,889,895,3,148,74,0,890,891,5,6,0,0,891,895,3,150,75,0,892,
        893,5,6,0,0,893,895,5,107,0,0,894,889,1,0,0,0,894,890,1,0,0,0,894,
        892,1,0,0,0,895,897,1,0,0,0,896,805,1,0,0,0,896,812,1,0,0,0,896,
        819,1,0,0,0,896,847,1,0,0,0,896,850,1,0,0,0,896,853,1,0,0,0,896,
        856,1,0,0,0,896,865,1,0,0,0,896,871,1,0,0,0,896,876,1,0,0,0,896,
        879,1,0,0,0,896,882,1,0,0,0,896,888,1,0,0,0,897,900,1,0,0,0,898,
        896,1,0,0,0,898,899,1,0,0,0,899,107,1,0,0,0,900,898,1,0,0,0,901,
        906,3,110,55,0,902,903,5,113,0,0,903,905,3,110,55,0,904,902,1,0,
        0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,109,1,0,
        0,0,908,906,1,0,0,0,909,912,3,112,56,0,910,912,3,106,53,0,911,909,
        1,0,0,0,911,910,1,0,0,0,912,111,1,0,0,0,913,914,5,127,0,0,914,919,
        3,150,75,0,915,916,5,113,0,0,916,918,3,150,75,0,917,915,1,0,0,0,
        918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,
        921,919,1,0,0,0,922,923,5,143,0,0,923,933,1,0,0,0,924,929,3,150,
        75,0,925,926,5,113,0,0,926,928,3,150,75,0,927,925,1,0,0,0,928,931,
        1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,933,1,0,0,0,931,929,
        1,0,0,0,932,913,1,0,0,0,932,924,1,0,0,0,933,934,1,0,0,0,934,935,
        5,108,0,0,935,936,3,106,53,0,936,113,1,0,0,0,937,938,5,129,0,0,938,
        942,3,150,75,0,939,941,3,116,58,0,940,939,1,0,0,0,941,944,1,0,0,
        0,942,940,1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,0,944,942,1,0,0,
        0,945,946,5,145,0,0,946,947,5,121,0,0,947,966,1,0,0,0,948,949,5,
        129,0,0,949,953,3,150,75,0,950,952,3,116,58,0,951,950,1,0,0,0,952,
        955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,956,1,0,0,0,955,
        953,1,0,0,0,956,958,5,121,0,0,957,959,3,114,57,0,958,957,1,0,0,0,
        958,959,1,0,0,0,959,960,1,0,0,0,960,961,5,129,0,0,961,962,5,145,
        0,0,962,963,3,150,75,0,963,964,5,121,0,0,964,966,1,0,0,0,965,937,
        1,0,0,0,965,948,1,0,0,0,966,115,1,0,0,0,967,968,3,150,75,0,968,969,
        5,119,0,0,969,970,5,107,0,0,970,979,1,0,0,0,971,972,3,150,75,0,972,
        973,5,119,0,0,973,974,5,125,0,0,974,975,3,106,53,0,975,976,5,141,
        0,0,976,979,1,0,0,0,977,979,3,150,75,0,978,967,1,0,0,0,978,971,1,
        0,0,0,978,977,1,0,0,0,979,117,1,0,0,0,980,985,3,120,60,0,981,982,
        5,113,0,0,982,984,3,120,60,0,983,981,1,0,0,0,984,987,1,0,0,0,985,
        983,1,0,0,0,985,986,1,0,0,0,986,119,1,0,0,0,987,985,1,0,0,0,988,
        989,3,150,75,0,989,990,5,6,0,0,990,991,5,127,0,0,991,992,3,34,17,
        0,992,993,5,143,0,0,993,999,1,0,0,0,994,995,3,106,53,0,995,996,5,
        6,0,0,996,997,3,150,75,0,997,999,1,0,0,0,998,988,1,0,0,0,998,994,
        1,0,0,0,999,121,1,0,0,0,1000,1008,3,154,77,0,1001,1002,3,130,65,
        0,1002,1003,5,117,0,0,1003,1005,1,0,0,0,1004,1001,1,0,0,0,1004,1005,
        1,0,0,0,1005,1006,1,0,0,0,1006,1008,3,124,62,0,1007,1000,1,0,0,0,
        1007,1004,1,0,0,0,1008,123,1,0,0,0,1009,1014,3,150,75,0,1010,1011,
        5,117,0,0,1011,1013,3,150,75,0,1012,1010,1,0,0,0,1013,1016,1,0,0,
        0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,125,1,0,0,0,1016,1014,
        1,0,0,0,1017,1018,6,63,-1,0,1018,1027,3,130,65,0,1019,1027,3,128,
        64,0,1020,1021,5,127,0,0,1021,1022,3,34,17,0,1022,1023,5,143,0,0,
        1023,1027,1,0,0,0,1024,1027,3,114,57,0,1025,1027,3,154,77,0,1026,
        1017,1,0,0,0,1026,1019,1,0,0,0,1026,1020,1,0,0,0,1026,1024,1,0,0,
        0,1026,1025,1,0,0,0,1027,1036,1,0,0,0,1028,1032,10,3,0,0,1029,1033,
        3,148,74,0,1030,1031,5,6,0,0,1031,1033,3,150,75,0,1032,1029,1,0,
        0,0,1032,1030,1,0,0,0,1033,1035,1,0,0,0,1034,1028,1,0,0,0,1035,1038,
        1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,127,1,0,0,0,1038,
        1036,1,0,0,0,1039,1040,3,150,75,0,1040,1042,5,127,0,0,1041,1043,
        3,132,66,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,
        1044,1045,5,143,0,0,1045,129,1,0,0,0,1046,1047,3,134,67,0,1047,1048,
        5,117,0,0,1048,1050,1,0,0,0,1049,1046,1,0,0,0,1049,1050,1,0,0,0,
        1050,1051,1,0,0,0,1051,1052,3,150,75,0,1052,131,1,0,0,0,1053,1058,
        3,106,53,0,1054,1055,5,113,0,0,1055,1057,3,106,53,0,1056,1054,1,
        0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,
        133,1,0,0,0,1060,1058,1,0,0,0,1061,1062,3,150,75,0,1062,135,1,0,
        0,0,1063,1072,5,103,0,0,1064,1065,5,117,0,0,1065,1072,7,11,0,0,1066,
        1067,5,105,0,0,1067,1069,5,117,0,0,1068,1070,7,11,0,0,1069,1068,
        1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1063,1,0,0,0,1071,
        1064,1,0,0,0,1071,1066,1,0,0,0,1072,137,1,0,0,0,1073,1075,7,12,0,
        0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1082,1,0,0,0,1076,1083,
        3,136,68,0,1077,1083,5,104,0,0,1078,1083,5,105,0,0,1079,1083,5,106,
        0,0,1080,1083,5,41,0,0,1081,1083,5,54,0,0,1082,1076,1,0,0,0,1082,
        1077,1,0,0,0,1082,1078,1,0,0,0,1082,1079,1,0,0,0,1082,1080,1,0,0,
        0,1082,1081,1,0,0,0,1083,139,1,0,0,0,1084,1088,3,138,69,0,1085,1088,
        5,107,0,0,1086,1088,5,56,0,0,1087,1084,1,0,0,0,1087,1085,1,0,0,0,
        1087,1086,1,0,0,0,1088,141,1,0,0,0,1089,1090,7,13,0,0,1090,143,1,
        0,0,0,1091,1092,7,14,0,0,1092,145,1,0,0,0,1093,1094,7,15,0,0,1094,
        147,1,0,0,0,1095,1098,5,102,0,0,1096,1098,3,146,73,0,1097,1095,1,
        0,0,0,1097,1096,1,0,0,0,1098,149,1,0,0,0,1099,1103,5,102,0,0,1100,
        1103,3,142,71,0,1101,1103,3,144,72,0,1102,1099,1,0,0,0,1102,1100,
        1,0,0,0,1102,1101,1,0,0,0,1103,151,1,0,0,0,1104,1105,5,107,0,0,1105,
        1106,5,119,0,0,1106,1107,3,138,69,0,1107,153,1,0,0,0,1108,1109,5,
        125,0,0,1109,1110,3,150,75,0,1110,1111,5,141,0,0,1111,155,1,0,0,
        0,132,159,166,170,177,192,203,215,231,240,248,251,262,268,278,287,
        290,294,297,301,304,307,310,313,317,321,324,327,330,334,337,346,
        352,373,390,407,413,419,430,432,443,446,452,460,466,468,472,477,
        480,483,487,491,494,496,499,503,507,510,512,514,519,530,536,543,
        548,552,556,562,564,571,579,582,585,604,618,634,646,658,666,670,
        677,683,692,696,720,737,749,759,762,766,769,782,799,803,809,816,
        828,832,835,844,858,885,894,896,898,906,911,919,929,932,942,953,
        958,965,978,985,998,1004,1007,1014,1026,1032,1036,1042,1049,1058,
        1069,1071,1074,1082,1087,1097,1102
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", 
                     "'-'", "'$'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", "'<='", 
                     "'<'", "<INVALID>", "'!~*'", "'!~'", "'??'", "'%'", 
                     "'+'", "'?'", "'\"'", "'''", "'~'", "'=~'", "'}'", 
                     "']'", "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "COHORT", "COLLATE", "CROSS", "CUBE", 
                      "CURRENT", "DATE", "DAY", "DESC", "DESCENDING", "DISTINCT", 
                      "ELSE", "END", "EXTRACT", "FINAL", "FIRST", "FN", 
                      "FOLLOWING", "FOR", "FROM", "FULL", "GROUP", "HAVING", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INF", "INNER", 
                      "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
                      "LEFT", "LIKE", "LIMIT", "MINUTE", "MONTH", "NAN_SQL", 
                      "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OR", 
                      "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
                      "PREWHERE", "QUARTER", "RANGE", "RETURN", "RIGHT", 
                      "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                      "SEMI", "SETTINGS", "SUBSTRING", "THEN", "TIES", "TIMESTAMP", 
                      "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TRUNCATE", 
                      "UNBOUNDED", "UNION", "USING", "VAR", "WEEK", "WHEN", 
                      "WHERE", "WHILE", "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_SINGLE", 
                      "ESCAPE_CHAR_DOUBLE", "IDENTIFIER", "FLOATING_LITERAL", 
                      "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
                      "STRING_LITERAL", "ARROW", "ASTERISK", "BACKQUOTE", 
                      "BACKSLASH", "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", 
                      "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", "HASH", 
                      "IREGEX_SINGLE", "IREGEX_DOUBLE", "LBRACE", "LBRACKET", 
                      "LPAREN", "LT_EQ", "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", 
                      "NULLISH", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                      "QUOTE_SINGLE", "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", 
                      "RBRACKET", "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", 
                      "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "WHITESPACE" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_varAssignment = 4
    RULE_identifierList = 5
    RULE_statement = 6
    RULE_exprStmt = 7
    RULE_ifStmt = 8
    RULE_whileStmt = 9
    RULE_returnStmt = 10
    RULE_funcStmt = 11
    RULE_block = 12
    RULE_dict = 13
    RULE_kvPair = 14
    RULE_kvPairList = 15
    RULE_select = 16
    RULE_selectUnionStmt = 17
    RULE_selectStmtWithParens = 18
    RULE_selectStmt = 19
    RULE_withClause = 20
    RULE_topClause = 21
    RULE_fromClause = 22
    RULE_arrayJoinClause = 23
    RULE_windowClause = 24
    RULE_prewhereClause = 25
    RULE_whereClause = 26
    RULE_groupByClause = 27
    RULE_havingClause = 28
    RULE_orderByClause = 29
    RULE_projectionOrderByClause = 30
    RULE_limitAndOffsetClause = 31
    RULE_offsetOnlyClause = 32
    RULE_settingsClause = 33
    RULE_joinExpr = 34
    RULE_joinOp = 35
    RULE_joinOpCross = 36
    RULE_joinConstraintClause = 37
    RULE_sampleClause = 38
    RULE_orderExprList = 39
    RULE_orderExpr = 40
    RULE_ratioExpr = 41
    RULE_settingExprList = 42
    RULE_settingExpr = 43
    RULE_windowExpr = 44
    RULE_winPartitionByClause = 45
    RULE_winOrderByClause = 46
    RULE_winFrameClause = 47
    RULE_winFrameExtend = 48
    RULE_winFrameBound = 49
    RULE_expr = 50
    RULE_columnTypeExpr = 51
    RULE_columnExprList = 52
    RULE_columnExpr = 53
    RULE_columnArgList = 54
    RULE_columnArgExpr = 55
    RULE_columnLambdaExpr = 56
    RULE_hogqlxTagElement = 57
    RULE_hogqlxTagAttribute = 58
    RULE_withExprList = 59
    RULE_withExpr = 60
    RULE_columnIdentifier = 61
    RULE_nestedIdentifier = 62
    RULE_tableExpr = 63
    RULE_tableFunctionExpr = 64
    RULE_tableIdentifier = 65
    RULE_tableArgList = 66
    RULE_databaseIdentifier = 67
    RULE_floatingLiteral = 68
    RULE_numberLiteral = 69
    RULE_literal = 70
    RULE_interval = 71
    RULE_keyword = 72
    RULE_keywordForAlias = 73
    RULE_alias = 74
    RULE_identifier = 75
    RULE_enumValue = 76
    RULE_placeholder = 77

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "varAssignment", 
                   "identifierList", "statement", "exprStmt", "ifStmt", 
                   "whileStmt", "returnStmt", "funcStmt", "block", "dict", 
                   "kvPair", "kvPairList", "select", "selectUnionStmt", 
                   "selectStmtWithParens", "selectStmt", "withClause", "topClause", 
                   "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "hogqlxTagElement", "hogqlxTagAttribute", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "databaseIdentifier", "floatingLiteral", "numberLiteral", 
                   "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    COHORT=14
    COLLATE=15
    CROSS=16
    CUBE=17
    CURRENT=18
    DATE=19
    DAY=20
    DESC=21
    DESCENDING=22
    DISTINCT=23
    ELSE=24
    END=25
    EXTRACT=26
    FINAL=27
    FIRST=28
    FN=29
    FOLLOWING=30
    FOR=31
    FROM=32
    FULL=33
    GROUP=34
    HAVING=35
    HOUR=36
    ID=37
    IF=38
    ILIKE=39
    IN=40
    INF=41
    INNER=42
    INTERVAL=43
    IS=44
    JOIN=45
    KEY=46
    LAST=47
    LEADING=48
    LEFT=49
    LIKE=50
    LIMIT=51
    MINUTE=52
    MONTH=53
    NAN_SQL=54
    NOT=55
    NULL_SQL=56
    NULLS=57
    OFFSET=58
    ON=59
    OR=60
    ORDER=61
    OUTER=62
    OVER=63
    PARTITION=64
    PRECEDING=65
    PREWHERE=66
    QUARTER=67
    RANGE=68
    RETURN=69
    RIGHT=70
    ROLLUP=71
    ROW=72
    ROWS=73
    SAMPLE=74
    SECOND=75
    SELECT=76
    SEMI=77
    SETTINGS=78
    SUBSTRING=79
    THEN=80
    TIES=81
    TIMESTAMP=82
    TO=83
    TOP=84
    TOTALS=85
    TRAILING=86
    TRIM=87
    TRUNCATE=88
    UNBOUNDED=89
    UNION=90
    USING=91
    VAR=92
    WEEK=93
    WHEN=94
    WHERE=95
    WHILE=96
    WINDOW=97
    WITH=98
    YEAR=99
    ESCAPE_CHAR_SINGLE=100
    ESCAPE_CHAR_DOUBLE=101
    IDENTIFIER=102
    FLOATING_LITERAL=103
    OCTAL_LITERAL=104
    DECIMAL_LITERAL=105
    HEXADECIMAL_LITERAL=106
    STRING_LITERAL=107
    ARROW=108
    ASTERISK=109
    BACKQUOTE=110
    BACKSLASH=111
    COLON=112
    COMMA=113
    CONCAT=114
    DASH=115
    DOLLAR=116
    DOT=117
    EQ_DOUBLE=118
    EQ_SINGLE=119
    GT_EQ=120
    GT=121
    HASH=122
    IREGEX_SINGLE=123
    IREGEX_DOUBLE=124
    LBRACE=125
    LBRACKET=126
    LPAREN=127
    LT_EQ=128
    LT=129
    NOT_EQ=130
    NOT_IREGEX=131
    NOT_REGEX=132
    NULLISH=133
    PERCENT=134
    PLUS=135
    QUERY=136
    QUOTE_DOUBLE=137
    QUOTE_SINGLE=138
    REGEX_SINGLE=139
    REGEX_DOUBLE=140
    RBRACE=141
    RBRACKET=142
    RPAREN=143
    SEMICOLON=144
    SLASH=145
    UNDERSCORE=146
    MULTI_LINE_COMMENT=147
    SINGLE_LINE_COMMENT=148
    WHITESPACE=149

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531439745564673) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 32833) != 0):
                self.state = 156
                self.declaration()
                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 162
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 115, 117, 125, 126, 127, 129, 135, 144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 165
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def dict_(self):
            return self.getTypedRuleContext(HogQLParser.DictContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 168
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 169
                self.dict_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(HogQLParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(HogQLParser.VAR)
            self.state = 173
            self.identifier()
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 174
                self.match(HogQLParser.COLON)
                self.state = 175
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 176
                self.expression()


            self.state = 179
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.identifier()
            self.state = 182
            self.match(HogQLParser.COLON)
            self.state = 183
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 184
            self.expression()
            self.state = 185
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.identifier()
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 188
                self.match(HogQLParser.COMMA)
                self.state = 189
                self.identifier()
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.exprStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197
                self.ifStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 198
                self.whileStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 199
                self.funcStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 200
                self.varAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 201
                self.returnStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 202
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.expression()
            self.state = 206
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(HogQLParser.IF)
            self.state = 209
            self.match(HogQLParser.LPAREN)
            self.state = 210
            self.expression()
            self.state = 211
            self.match(HogQLParser.RPAREN)
            self.state = 212
            self.statement()
            self.state = 215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 213
                self.match(HogQLParser.ELSE)
                self.state = 214
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(HogQLParser.WHILE)
            self.state = 218
            self.match(HogQLParser.LPAREN)
            self.state = 219
            self.expression()
            self.state = 220
            self.match(HogQLParser.RPAREN)
            self.state = 221
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(HogQLParser.RETURN)
            self.state = 224
            self.expression()
            self.state = 225
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(HogQLParser.FN)
            self.state = 228
            self.identifier()
            self.state = 229
            self.match(HogQLParser.LPAREN)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                self.state = 230
                self.identifierList()


            self.state = 233
            self.match(HogQLParser.RPAREN)
            self.state = 234
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(HogQLParser.LBRACE)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531439745564673) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 32833) != 0):
                self.state = 237
                self.declaration()
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_dict

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = HogQLParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112, 113, 141, 143, 144]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.match(HogQLParser.LBRACE)
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294249969332256769) != 0) or _la==129 or _la==135:
                    self.state = 247
                    self.kvPairList()


                self.state = 250
                self.match(HogQLParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.expression()
            self.state = 254
            self.match(HogQLParser.COLON)
            self.state = 255
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.kvPair()
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 258
                self.match(HogQLParser.COMMA)
                self.state = 259
                self.kvPair()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 265
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 266
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 267
                self.hogqlxTagElement()
                pass


            self.state = 270
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.selectStmtWithParens()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 273
                self.match(HogQLParser.UNION)
                self.state = 274
                self.match(HogQLParser.ALL)
                self.state = 275
                self.selectStmtWithParens()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_selectStmtWithParens)
        try:
            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76, 98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.selectStmt()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.match(HogQLParser.LPAREN)
                self.state = 283
                self.selectUnionStmt()
                self.state = 284
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 286
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 289
                localctx.with_ = self.withClause()


            self.state = 292
            self.match(HogQLParser.SELECT)
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 293
                self.match(HogQLParser.DISTINCT)


            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 296
                self.topClause()


            self.state = 299
            localctx.columns = self.columnExprList()
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 300
                localctx.from_ = self.fromClause()


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567347999932448) != 0):
                self.state = 303
                self.arrayJoinClause()


            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 306
                self.prewhereClause()


            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 309
                localctx.where = self.whereClause()


            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 312
                self.groupByClause()


            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 315
                self.match(HogQLParser.WITH)
                self.state = 316
                _la = self._input.LA(1)
                if not(_la==17 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 319
                self.match(HogQLParser.WITH)
                self.state = 320
                self.match(HogQLParser.TOTALS)


            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 323
                self.havingClause()


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 326
                self.windowClause()


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 329
                self.orderByClause()


            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 332
                self.limitAndOffsetClause()
                pass
            elif token in [58]:
                self.state = 333
                self.offsetOnlyClause()
                pass
            elif token in [-1, 78, 90, 143]:
                pass
            else:
                pass
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 336
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(HogQLParser.WITH)
            self.state = 340
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(HogQLParser.TOP)
            self.state = 343
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 344
                self.match(HogQLParser.WITH)
                self.state = 345
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(HogQLParser.FROM)
            self.state = 349
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==49:
                self.state = 351
                _la = self._input.LA(1)
                if not(_la==42 or _la==49):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 354
            self.match(HogQLParser.ARRAY)
            self.state = 355
            self.match(HogQLParser.JOIN)
            self.state = 356
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(HogQLParser.WINDOW)
            self.state = 359
            self.identifier()
            self.state = 360
            self.match(HogQLParser.AS)
            self.state = 361
            self.match(HogQLParser.LPAREN)
            self.state = 362
            self.windowExpr()
            self.state = 363
            self.match(HogQLParser.RPAREN)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 364
                self.match(HogQLParser.COMMA)
                self.state = 365
                self.identifier()
                self.state = 366
                self.match(HogQLParser.AS)
                self.state = 367
                self.match(HogQLParser.LPAREN)
                self.state = 368
                self.windowExpr()
                self.state = 369
                self.match(HogQLParser.RPAREN)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(HogQLParser.PREWHERE)
            self.state = 377
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(HogQLParser.WHERE)
            self.state = 380
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(HogQLParser.GROUP)
            self.state = 383
            self.match(HogQLParser.BY)
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 384
                _la = self._input.LA(1)
                if not(_la==17 or _la==71):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 385
                self.match(HogQLParser.LPAREN)
                self.state = 386
                self.columnExprList()
                self.state = 387
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 389
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(HogQLParser.HAVING)
            self.state = 393
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(HogQLParser.ORDER)
            self.state = 396
            self.match(HogQLParser.BY)
            self.state = 397
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(HogQLParser.ORDER)
            self.state = 400
            self.match(HogQLParser.BY)
            self.state = 401
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.match(HogQLParser.LIMIT)
                self.state = 404
                self.columnExpr(0)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 405
                    self.match(HogQLParser.COMMA)
                    self.state = 406
                    self.columnExpr(0)


                self.state = 413
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [98]:
                    self.state = 409
                    self.match(HogQLParser.WITH)
                    self.state = 410
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [11]:
                    self.state = 411
                    self.match(HogQLParser.BY)
                    self.state = 412
                    self.columnExprList()
                    pass
                elif token in [-1, 78, 90, 143]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self.match(HogQLParser.LIMIT)
                self.state = 416
                self.columnExpr(0)
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 417
                    self.match(HogQLParser.WITH)
                    self.state = 418
                    self.match(HogQLParser.TIES)


                self.state = 421
                self.match(HogQLParser.OFFSET)
                self.state = 422
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 424
                self.match(HogQLParser.LIMIT)
                self.state = 425
                self.columnExpr(0)
                self.state = 426
                self.match(HogQLParser.OFFSET)
                self.state = 427
                self.columnExpr(0)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 428
                    self.match(HogQLParser.BY)
                    self.state = 429
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(HogQLParser.OFFSET)
            self.state = 435
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(HogQLParser.SETTINGS)
            self.state = 438
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 441
                self.tableExpr(0)
                self.state = 443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(HogQLParser.FINAL)


                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 448
                self.match(HogQLParser.LPAREN)
                self.state = 449
                self.joinExpr(0)
                self.state = 450
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 468
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 466
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 454
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 455
                        self.joinOpCross()
                        self.state = 456
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 458
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 460
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 567356589867290) != 0) or _la==70 or _la==77:
                            self.state = 459
                            self.joinOp()


                        self.state = 462
                        self.match(HogQLParser.JOIN)
                        self.state = 463
                        self.joinExpr(0)
                        self.state = 464
                        self.joinConstraintClause()
                        pass

             
                self.state = 470
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 471
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 474
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 475
                    self.match(HogQLParser.INNER)
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 476
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 479
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77:
                        self.state = 482
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 485
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==70):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 486
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 489
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==70):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 490
                        self.match(HogQLParser.OUTER)


                    self.state = 494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77:
                        self.state = 493
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 498
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 501
                    self.match(HogQLParser.FULL)
                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 502
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 505
                    self.match(HogQLParser.FULL)
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62:
                        self.state = 506
                        self.match(HogQLParser.OUTER)


                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 509
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_joinOpCross)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.match(HogQLParser.CROSS)
                self.state = 517
                self.match(HogQLParser.JOIN)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_joinConstraintClause)
        try:
            self.state = 530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(HogQLParser.ON)
                self.state = 522
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.match(HogQLParser.USING)
                self.state = 524
                self.match(HogQLParser.LPAREN)
                self.state = 525
                self.columnExprList()
                self.state = 526
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 528
                self.match(HogQLParser.USING)
                self.state = 529
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(HogQLParser.SAMPLE)
            self.state = 533
            self.ratioExpr()
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 534
                self.match(HogQLParser.OFFSET)
                self.state = 535
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.orderExpr()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 539
                self.match(HogQLParser.COMMA)
                self.state = 540
                self.orderExpr()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.columnExpr(0)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0):
                self.state = 547
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6291584) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 550
                self.match(HogQLParser.NULLS)
                self.state = 551
                _la = self._input.LA(1)
                if not(_la==28 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 554
                self.match(HogQLParser.COLLATE)
                self.state = 555
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ratioExpr)
        try:
            self.state = 564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.placeholder()
                pass
            elif token in [41, 54, 103, 104, 105, 106, 115, 117, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.numberLiteral()
                self.state = 562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 560
                    self.match(HogQLParser.SLASH)
                    self.state = 561
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.settingExpr()
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 567
                self.match(HogQLParser.COMMA)
                self.state = 568
                self.settingExpr()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.identifier()
            self.state = 575
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 576
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 578
                self.winPartitionByClause()


            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 581
                self.winOrderByClause()


            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==73:
                self.state = 584
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(HogQLParser.PARTITION)
            self.state = 588
            self.match(HogQLParser.BY)
            self.state = 589
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(HogQLParser.ORDER)
            self.state = 592
            self.match(HogQLParser.BY)
            self.state = 593
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            _la = self._input.LA(1)
            if not(_la==68 or _la==73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 596
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_winFrameExtend)
        try:
            self.state = 604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 41, 54, 89, 103, 104, 105, 106, 115, 117, 135]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.match(HogQLParser.BETWEEN)
                self.state = 600
                self.winFrameBound()
                self.state = 601
                self.match(HogQLParser.AND)
                self.state = 602
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 606
                self.match(HogQLParser.CURRENT)
                self.state = 607
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 608
                self.match(HogQLParser.UNBOUNDED)
                self.state = 609
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 610
                self.match(HogQLParser.UNBOUNDED)
                self.state = 611
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 612
                self.numberLiteral()
                self.state = 613
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 615
                self.numberLiteral()
                self.state = 616
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.columnExpr(0)
            self.state = 621
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 623
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 624
                self.identifier()
                self.state = 625
                self.match(HogQLParser.LPAREN)
                self.state = 626
                self.identifier()
                self.state = 627
                self.columnTypeExpr()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 628
                    self.match(HogQLParser.COMMA)
                    self.state = 629
                    self.identifier()
                    self.state = 630
                    self.columnTypeExpr()
                    self.state = 636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 637
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 639
                self.identifier()
                self.state = 640
                self.match(HogQLParser.LPAREN)
                self.state = 641
                self.enumValue()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 642
                    self.match(HogQLParser.COMMA)
                    self.state = 643
                    self.enumValue()
                    self.state = 648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 649
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 651
                self.identifier()
                self.state = 652
                self.match(HogQLParser.LPAREN)
                self.state = 653
                self.columnTypeExpr()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 654
                    self.match(HogQLParser.COMMA)
                    self.state = 655
                    self.columnTypeExpr()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 661
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 663
                self.identifier()
                self.state = 664
                self.match(HogQLParser.LPAREN)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 665
                    self.columnExprList()


                self.state = 668
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.columnExpr(0)
            self.state = 677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 673
                    self.match(HogQLParser.COMMA)
                    self.state = 674
                    self.columnExpr(0) 
                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 681
                self.match(HogQLParser.CASE)
                self.state = 683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 682
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 685
                    self.match(HogQLParser.WHEN)
                    self.state = 686
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 687
                    self.match(HogQLParser.THEN)
                    self.state = 688
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 692 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 694
                    self.match(HogQLParser.ELSE)
                    self.state = 695
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 698
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 700
                self.match(HogQLParser.CAST)
                self.state = 701
                self.match(HogQLParser.LPAREN)
                self.state = 702
                self.columnExpr(0)
                self.state = 703
                self.match(HogQLParser.AS)
                self.state = 704
                self.columnTypeExpr()
                self.state = 705
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 707
                self.match(HogQLParser.DATE)
                self.state = 708
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 709
                self.match(HogQLParser.INTERVAL)
                self.state = 710
                self.columnExpr(0)
                self.state = 711
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 713
                self.match(HogQLParser.SUBSTRING)
                self.state = 714
                self.match(HogQLParser.LPAREN)
                self.state = 715
                self.columnExpr(0)
                self.state = 716
                self.match(HogQLParser.FROM)
                self.state = 717
                self.columnExpr(0)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 718
                    self.match(HogQLParser.FOR)
                    self.state = 719
                    self.columnExpr(0)


                self.state = 722
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 724
                self.match(HogQLParser.TIMESTAMP)
                self.state = 725
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 726
                self.match(HogQLParser.TRIM)
                self.state = 727
                self.match(HogQLParser.LPAREN)
                self.state = 728
                _la = self._input.LA(1)
                if not(_la==10 or _la==48 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 729
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 730
                self.match(HogQLParser.FROM)
                self.state = 731
                self.columnExpr(0)
                self.state = 732
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 734
                self.identifier()

                self.state = 735
                self.match(HogQLParser.LPAREN)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 736
                    self.columnExprList()


                self.state = 739
                self.match(HogQLParser.RPAREN)
                self.state = 741
                self.match(HogQLParser.OVER)
                self.state = 742
                self.match(HogQLParser.LPAREN)
                self.state = 743
                self.windowExpr()
                self.state = 744
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 746
                self.identifier()

                self.state = 747
                self.match(HogQLParser.LPAREN)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 748
                    self.columnExprList()


                self.state = 751
                self.match(HogQLParser.RPAREN)
                self.state = 753
                self.match(HogQLParser.OVER)
                self.state = 754
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 756
                self.identifier()
                self.state = 762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.match(HogQLParser.LPAREN)
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                        self.state = 758
                        self.columnExprList()


                    self.state = 761
                    self.match(HogQLParser.RPAREN)


                self.state = 764
                self.match(HogQLParser.LPAREN)
                self.state = 766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 765
                    self.match(HogQLParser.DISTINCT)


                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 768
                    self.columnArgList()


                self.state = 771
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 773
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 774
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 775
                self.match(HogQLParser.DASH)
                self.state = 776
                self.columnExpr(18)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 777
                self.match(HogQLParser.NOT)
                self.state = 778
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                    self.state = 779
                    self.tableIdentifier()
                    self.state = 780
                    self.match(HogQLParser.DOT)


                self.state = 784
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 785
                self.match(HogQLParser.LPAREN)
                self.state = 786
                self.selectUnionStmt()
                self.state = 787
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 789
                self.match(HogQLParser.LPAREN)
                self.state = 790
                self.columnExpr(0)
                self.state = 791
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 793
                self.match(HogQLParser.LPAREN)
                self.state = 794
                self.columnExprList()
                self.state = 795
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 797
                self.match(HogQLParser.LBRACKET)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                    self.state = 798
                    self.columnExprList()


                self.state = 801
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 802
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 896
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 805
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 809
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [109]:
                            self.state = 806
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [145]:
                            self.state = 807
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [134]:
                            self.state = 808
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 811
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 812
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 816
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [135]:
                            self.state = 813
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [115]:
                            self.state = 814
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [114]:
                            self.state = 815
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 818
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 819
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 844
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                        if la_ == 1:
                            self.state = 820
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 821
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 822
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 823
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 824
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 825
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 826
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 828
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==55:
                                self.state = 827
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 830
                            self.match(HogQLParser.IN)
                            self.state = 832
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                            if la_ == 1:
                                self.state = 831
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 835
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==55:
                                self.state = 834
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 837
                            _la = self._input.LA(1)
                            if not(_la==39 or _la==50):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 838
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 839
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 840
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 841
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 842
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 843
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 846
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 847
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 848
                        self.match(HogQLParser.NULLISH)
                        self.state = 849
                        self.columnExpr(14)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 850
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 851
                        self.match(HogQLParser.AND)
                        self.state = 852
                        self.columnExpr(12)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 853
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 854
                        self.match(HogQLParser.OR)
                        self.state = 855
                        self.columnExpr(11)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 856
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 858
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55:
                            self.state = 857
                            self.match(HogQLParser.NOT)


                        self.state = 860
                        self.match(HogQLParser.BETWEEN)
                        self.state = 861
                        self.columnExpr(0)
                        self.state = 862
                        self.match(HogQLParser.AND)
                        self.state = 863
                        self.columnExpr(10)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 865
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 866
                        self.match(HogQLParser.QUERY)
                        self.state = 867
                        self.columnExpr(0)
                        self.state = 868
                        self.match(HogQLParser.COLON)
                        self.state = 869
                        self.columnExpr(8)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 871
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 872
                        self.match(HogQLParser.LBRACKET)
                        self.state = 873
                        self.columnExpr(0)
                        self.state = 874
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 876
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 877
                        self.match(HogQLParser.DOT)
                        self.state = 878
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 879
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 880
                        self.match(HogQLParser.DOT)
                        self.state = 881
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 882
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 883
                        self.match(HogQLParser.IS)
                        self.state = 885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55:
                            self.state = 884
                            self.match(HogQLParser.NOT)


                        self.state = 887
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 888
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 894
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                        if la_ == 1:
                            self.state = 889
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 890
                            self.match(HogQLParser.AS)
                            self.state = 891
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 892
                            self.match(HogQLParser.AS)
                            self.state = 893
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.columnArgExpr()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 902
                self.match(HogQLParser.COMMA)
                self.state = 903
                self.columnArgExpr()
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_columnArgExpr)
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.state = 913
                self.match(HogQLParser.LPAREN)
                self.state = 914
                self.identifier()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 915
                    self.match(HogQLParser.COMMA)
                    self.state = 916
                    self.identifier()
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 922
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102]:
                self.state = 924
                self.identifier()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==113:
                    self.state = 925
                    self.match(HogQLParser.COMMA)
                    self.state = 926
                    self.identifier()
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 934
            self.match(HogQLParser.ARROW)
            self.state = 935
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.match(HogQLParser.LT)
                self.state = 938
                self.identifier()
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                    self.state = 939
                    self.hogqlxTagAttribute()
                    self.state = 944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 945
                self.match(HogQLParser.SLASH)
                self.state = 946
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.match(HogQLParser.LT)
                self.state = 949
                self.identifier()
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -90074192107536386) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 339033980927) != 0):
                    self.state = 950
                    self.hogqlxTagAttribute()
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 956
                self.match(HogQLParser.GT)
                self.state = 958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.hogqlxTagElement()


                self.state = 960
                self.match(HogQLParser.LT)
                self.state = 961
                self.match(HogQLParser.SLASH)
                self.state = 962
                self.identifier()
                self.state = 963
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 967
                self.identifier()
                self.state = 968
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 969
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.identifier()
                self.state = 972
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 973
                self.match(HogQLParser.LBRACE)
                self.state = 974
                self.columnExpr(0)
                self.state = 975
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 977
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.withExpr()
            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 981
                self.match(HogQLParser.COMMA)
                self.state = 982
                self.withExpr()
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_withExpr)
        try:
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.identifier()
                self.state = 989
                self.match(HogQLParser.AS)
                self.state = 990
                self.match(HogQLParser.LPAREN)
                self.state = 991
                self.selectUnionStmt()
                self.state = 992
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.columnExpr(0)
                self.state = 995
                self.match(HogQLParser.AS)
                self.state = 996
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_columnIdentifier)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1001
                    self.tableIdentifier()
                    self.state = 1002
                    self.match(HogQLParser.DOT)


                self.state = 1006
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.identifier()
            self.state = 1014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1010
                    self.match(HogQLParser.DOT)
                    self.state = 1011
                    self.identifier() 
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1018
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1019
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1020
                self.match(HogQLParser.LPAREN)
                self.state = 1021
                self.selectUnionStmt()
                self.state = 1022
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1024
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1025
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1036
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1028
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1032
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [19, 28, 37, 46, 102]:
                        self.state = 1029
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1030
                        self.match(HogQLParser.AS)
                        self.state = 1031
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.identifier()
            self.state = 1040
            self.match(HogQLParser.LPAREN)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -536870914) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2294531444308967425) != 0) or _la==129 or _la==135:
                self.state = 1041
                self.tableArgList()


            self.state = 1044
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1046
                self.databaseIdentifier()
                self.state = 1047
                self.match(HogQLParser.DOT)


            self.state = 1051
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.columnExpr(0)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==113:
                self.state = 1054
                self.match(HogQLParser.COMMA)
                self.state = 1055
                self.columnExpr(0)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(HogQLParser.DOT)
                self.state = 1065
                _la = self._input.LA(1)
                if not(_la==104 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1067
                self.match(HogQLParser.DOT)
                self.state = 1069
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1068
                    _la = self._input.LA(1)
                    if not(_la==104 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115 or _la==135:
                self.state = 1073
                _la = self._input.LA(1)
                if not(_la==115 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1076
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1077
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1078
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1079
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1080
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1081
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_literal)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 54, 103, 104, 105, 106, 115, 117, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1084
                self.numberLiteral()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1085
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1086
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13510867602636800) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4362076417) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -103585059710173186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 29259462647) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70506452090880) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alias)
        try:
            self.state = 1097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [19, 28, 37, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1096
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_identifier)
        try:
            self.state = 1102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [20, 36, 52, 53, 67, 75, 93, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1101
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 1105
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1106
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(HogQLParser.LBRACE)
            self.state = 1109
            self.identifier()
            self.state = 1110
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.joinExpr_sempred
        self._predicates[53] = self.columnExpr_sempred
        self._predicates[63] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         




