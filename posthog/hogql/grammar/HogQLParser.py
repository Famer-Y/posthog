# Generated from HogQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,245,1057,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,1,
        0,5,0,146,8,0,10,0,12,0,149,9,0,1,0,1,0,1,1,1,1,3,1,155,8,1,1,2,
        1,2,1,3,1,3,1,3,3,3,162,8,3,1,3,1,3,1,3,3,3,167,8,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,3,4,177,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,3,6,189,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,
        1,9,5,9,203,8,9,10,9,12,9,206,9,9,1,9,1,9,1,10,1,10,1,10,3,10,213,
        8,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,221,8,11,10,11,12,11,224,
        9,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,232,8,12,1,13,3,13,235,8,
        13,1,13,1,13,3,13,239,8,13,1,13,3,13,242,8,13,1,13,1,13,3,13,246,
        8,13,1,13,3,13,249,8,13,1,13,3,13,252,8,13,1,13,3,13,255,8,13,1,
        13,3,13,258,8,13,1,13,1,13,3,13,262,8,13,1,13,1,13,3,13,266,8,13,
        1,13,3,13,269,8,13,1,13,3,13,272,8,13,1,13,3,13,275,8,13,1,13,1,
        13,3,13,279,8,13,1,13,3,13,282,8,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,3,15,291,8,15,1,16,1,16,1,16,1,17,3,17,297,8,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,5,18,316,8,18,10,18,12,18,319,9,18,1,19,1,19,1,19,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,335,8,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,3,25,352,8,25,1,25,1,25,1,25,1,25,3,25,358,8,25,1,25,1,25,
        1,25,1,25,3,25,364,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,375,8,25,3,25,377,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,28,3,28,388,8,28,1,28,3,28,391,8,28,1,28,1,28,1,28,1,28,
        3,28,397,8,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,405,8,28,1,28,1,
        28,1,28,1,28,5,28,411,8,28,10,28,12,28,414,9,28,1,29,3,29,417,8,
        29,1,29,1,29,1,29,3,29,422,8,29,1,29,3,29,425,8,29,1,29,3,29,428,
        8,29,1,29,1,29,3,29,432,8,29,1,29,1,29,3,29,436,8,29,1,29,3,29,439,
        8,29,3,29,441,8,29,1,29,3,29,444,8,29,1,29,1,29,3,29,448,8,29,1,
        29,1,29,3,29,452,8,29,1,29,3,29,455,8,29,3,29,457,8,29,3,29,459,
        8,29,1,30,1,30,1,30,3,30,464,8,30,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,3,31,475,8,31,1,32,1,32,1,32,1,32,3,32,481,8,32,1,
        33,1,33,1,33,5,33,486,8,33,10,33,12,33,489,9,33,1,34,1,34,3,34,493,
        8,34,1,34,1,34,3,34,497,8,34,1,34,1,34,3,34,501,8,34,1,35,1,35,1,
        35,1,35,3,35,507,8,35,3,35,509,8,35,1,36,1,36,1,36,5,36,514,8,36,
        10,36,12,36,517,9,36,1,37,1,37,1,37,1,37,1,38,3,38,524,8,38,1,38,
        3,38,527,8,38,1,38,3,38,530,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,549,8,
        42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,
        43,563,8,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,5,45,577,8,45,10,45,12,45,580,9,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,5,45,589,8,45,10,45,12,45,592,9,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,5,45,601,8,45,10,45,12,45,604,9,45,1,45,1,45,1,
        45,1,45,1,45,3,45,611,8,45,1,45,1,45,3,45,615,8,45,1,46,1,46,1,46,
        5,46,620,8,46,10,46,12,46,623,9,46,1,47,1,47,1,47,3,47,628,8,47,
        1,47,1,47,1,47,1,47,1,47,4,47,635,8,47,11,47,12,47,636,1,47,1,47,
        3,47,641,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
        665,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,3,47,682,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,3,47,694,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,704,8,47,1,47,3,47,707,8,47,1,47,1,47,3,47,711,8,
        47,1,47,3,47,714,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,3,47,727,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,744,8,47,1,47,1,47,3,
        47,748,8,47,1,47,1,47,1,47,1,47,3,47,754,8,47,1,47,1,47,1,47,1,47,
        1,47,3,47,761,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,3,47,773,8,47,1,47,1,47,3,47,777,8,47,1,47,3,47,780,8,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,789,8,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,803,8,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,830,8,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,839,8,47,5,47,841,8,47,
        10,47,12,47,844,9,47,1,48,1,48,1,48,5,48,849,8,48,10,48,12,48,852,
        9,48,1,49,1,49,3,49,856,8,49,1,50,1,50,1,50,1,50,5,50,862,8,50,10,
        50,12,50,865,9,50,1,50,1,50,1,50,1,50,1,50,5,50,872,8,50,10,50,12,
        50,875,9,50,3,50,877,8,50,1,50,1,50,1,50,1,51,1,51,1,51,5,51,885,
        8,51,10,51,12,51,888,9,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,896,
        8,51,10,51,12,51,899,9,51,1,51,1,51,3,51,903,8,51,1,51,1,51,1,51,
        1,51,1,51,3,51,910,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,3,52,923,8,52,1,53,1,53,1,53,5,53,928,8,53,10,53,
        12,53,931,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,943,8,54,1,55,1,55,1,55,1,55,3,55,949,8,55,1,55,3,55,952,8,
        55,1,56,1,56,1,56,5,56,957,8,56,10,56,12,56,960,9,56,1,57,1,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,971,8,57,1,57,1,57,1,57,1,
        57,3,57,977,8,57,5,57,979,8,57,10,57,12,57,982,9,57,1,58,1,58,1,
        58,3,58,987,8,58,1,58,1,58,1,59,1,59,1,59,3,59,994,8,59,1,59,1,59,
        1,60,1,60,1,60,5,60,1001,8,60,10,60,12,60,1004,9,60,1,61,1,61,1,
        62,1,62,1,62,1,62,1,62,1,62,3,62,1014,8,62,3,62,1016,8,62,1,63,3,
        63,1019,8,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1027,8,63,1,64,1,
        64,1,64,3,64,1032,8,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,3,
        68,1042,8,68,1,69,1,69,1,69,3,69,1047,8,69,1,70,1,70,1,70,1,70,1,
        71,1,71,1,71,1,71,1,71,0,3,56,94,114,72,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,0,16,2,0,32,32,142,142,2,0,84,84,96,96,3,0,4,4,8,8,12,
        12,4,0,4,4,7,8,12,12,148,148,2,0,96,96,141,141,2,0,4,4,8,8,2,0,11,
        11,42,43,2,0,62,62,93,93,2,0,133,133,144,144,3,0,17,17,95,95,171,
        171,2,0,79,79,98,98,1,0,200,201,2,0,211,211,231,231,8,0,37,37,76,
        76,108,108,110,110,132,132,146,146,187,187,193,193,15,0,2,24,26,
        36,38,75,77,81,83,107,109,109,111,112,114,115,117,130,133,145,147,
        182,184,186,188,189,191,192,194,195,4,0,36,36,62,62,77,77,91,91,
        1185,0,147,1,0,0,0,2,154,1,0,0,0,4,156,1,0,0,0,6,158,1,0,0,0,8,176,
        1,0,0,0,10,178,1,0,0,0,12,181,1,0,0,0,14,190,1,0,0,0,16,196,1,0,
        0,0,18,200,1,0,0,0,20,212,1,0,0,0,22,216,1,0,0,0,24,231,1,0,0,0,
        26,234,1,0,0,0,28,283,1,0,0,0,30,286,1,0,0,0,32,292,1,0,0,0,34,296,
        1,0,0,0,36,302,1,0,0,0,38,320,1,0,0,0,40,323,1,0,0,0,42,326,1,0,
        0,0,44,336,1,0,0,0,46,339,1,0,0,0,48,343,1,0,0,0,50,376,1,0,0,0,
        52,378,1,0,0,0,54,381,1,0,0,0,56,396,1,0,0,0,58,458,1,0,0,0,60,463,
        1,0,0,0,62,474,1,0,0,0,64,476,1,0,0,0,66,482,1,0,0,0,68,490,1,0,
        0,0,70,508,1,0,0,0,72,510,1,0,0,0,74,518,1,0,0,0,76,523,1,0,0,0,
        78,531,1,0,0,0,80,535,1,0,0,0,82,539,1,0,0,0,84,548,1,0,0,0,86,562,
        1,0,0,0,88,564,1,0,0,0,90,614,1,0,0,0,92,616,1,0,0,0,94,747,1,0,
        0,0,96,845,1,0,0,0,98,855,1,0,0,0,100,876,1,0,0,0,102,909,1,0,0,
        0,104,922,1,0,0,0,106,924,1,0,0,0,108,942,1,0,0,0,110,951,1,0,0,
        0,112,953,1,0,0,0,114,970,1,0,0,0,116,983,1,0,0,0,118,993,1,0,0,
        0,120,997,1,0,0,0,122,1005,1,0,0,0,124,1015,1,0,0,0,126,1018,1,0,
        0,0,128,1031,1,0,0,0,130,1033,1,0,0,0,132,1035,1,0,0,0,134,1037,
        1,0,0,0,136,1041,1,0,0,0,138,1046,1,0,0,0,140,1048,1,0,0,0,142,1052,
        1,0,0,0,144,146,3,2,1,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,
        1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,
        5,0,0,1,151,1,1,0,0,0,152,155,3,6,3,0,153,155,3,8,4,0,154,152,1,
        0,0,0,154,153,1,0,0,0,155,3,1,0,0,0,156,157,3,94,47,0,157,5,1,0,
        0,0,158,161,5,183,0,0,159,162,5,198,0,0,160,162,3,132,66,0,161,159,
        1,0,0,0,161,160,1,0,0,0,162,166,1,0,0,0,163,164,5,208,0,0,164,165,
        5,215,0,0,165,167,3,4,2,0,166,163,1,0,0,0,166,167,1,0,0,0,167,168,
        1,0,0,0,168,169,5,240,0,0,169,7,1,0,0,0,170,177,3,16,8,0,171,177,
        3,10,5,0,172,177,3,12,6,0,173,177,3,14,7,0,174,177,3,16,8,0,175,
        177,3,18,9,0,176,170,1,0,0,0,176,171,1,0,0,0,176,172,1,0,0,0,176,
        173,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,9,1,0,0,0,178,179,
        3,4,2,0,179,180,5,240,0,0,180,11,1,0,0,0,181,182,5,78,0,0,182,183,
        5,223,0,0,183,184,3,4,2,0,184,185,5,239,0,0,185,188,3,8,4,0,186,
        187,5,52,0,0,187,189,3,8,4,0,188,186,1,0,0,0,188,189,1,0,0,0,189,
        13,1,0,0,0,190,191,5,190,0,0,191,192,5,223,0,0,192,193,3,4,2,0,193,
        194,5,239,0,0,194,195,3,8,4,0,195,15,1,0,0,0,196,197,5,140,0,0,197,
        198,3,4,2,0,198,199,5,240,0,0,199,17,1,0,0,0,200,204,5,221,0,0,201,
        203,3,2,1,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,
        205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,237,0,0,208,
        19,1,0,0,0,209,213,3,22,11,0,210,213,3,26,13,0,211,213,3,102,51,
        0,212,209,1,0,0,0,212,210,1,0,0,0,212,211,1,0,0,0,213,214,1,0,0,
        0,214,215,5,0,0,1,215,21,1,0,0,0,216,222,3,24,12,0,217,218,5,177,
        0,0,218,219,5,4,0,0,219,221,3,24,12,0,220,217,1,0,0,0,221,224,1,
        0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,23,1,0,0,0,224,222,1,0,
        0,0,225,232,3,26,13,0,226,227,5,223,0,0,227,228,3,22,11,0,228,229,
        5,239,0,0,229,232,1,0,0,0,230,232,3,142,71,0,231,225,1,0,0,0,231,
        226,1,0,0,0,231,230,1,0,0,0,232,25,1,0,0,0,233,235,3,28,14,0,234,
        233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,238,5,147,0,0,237,
        239,5,49,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,
        242,3,30,15,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,
        245,3,92,46,0,244,246,3,32,16,0,245,244,1,0,0,0,245,246,1,0,0,0,
        246,248,1,0,0,0,247,249,3,34,17,0,248,247,1,0,0,0,248,249,1,0,0,
        0,249,251,1,0,0,0,250,252,3,38,19,0,251,250,1,0,0,0,251,252,1,0,
        0,0,252,254,1,0,0,0,253,255,3,40,20,0,254,253,1,0,0,0,254,255,1,
        0,0,0,255,257,1,0,0,0,256,258,3,42,21,0,257,256,1,0,0,0,257,258,
        1,0,0,0,258,261,1,0,0,0,259,260,5,192,0,0,260,262,7,0,0,0,261,259,
        1,0,0,0,261,262,1,0,0,0,262,265,1,0,0,0,263,264,5,192,0,0,264,266,
        5,170,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,269,
        3,44,22,0,268,267,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,272,
        3,36,18,0,271,270,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,275,
        3,46,23,0,274,273,1,0,0,0,274,275,1,0,0,0,275,278,1,0,0,0,276,279,
        3,50,25,0,277,279,3,52,26,0,278,276,1,0,0,0,278,277,1,0,0,0,278,
        279,1,0,0,0,279,281,1,0,0,0,280,282,3,54,27,0,281,280,1,0,0,0,281,
        282,1,0,0,0,282,27,1,0,0,0,283,284,5,192,0,0,284,285,3,106,53,0,
        285,29,1,0,0,0,286,287,5,169,0,0,287,290,5,201,0,0,288,289,5,192,
        0,0,289,291,5,165,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,31,1,0,
        0,0,292,293,5,68,0,0,293,294,3,56,28,0,294,33,1,0,0,0,295,297,7,
        1,0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,
        9,0,0,299,300,5,90,0,0,300,301,3,92,46,0,301,35,1,0,0,0,302,303,
        5,191,0,0,303,304,3,138,69,0,304,305,5,10,0,0,305,306,5,223,0,0,
        306,307,3,76,38,0,307,317,5,239,0,0,308,309,5,209,0,0,309,310,3,
        138,69,0,310,311,5,10,0,0,311,312,5,223,0,0,312,313,3,76,38,0,313,
        314,5,239,0,0,314,316,1,0,0,0,315,308,1,0,0,0,316,319,1,0,0,0,317,
        315,1,0,0,0,317,318,1,0,0,0,318,37,1,0,0,0,319,317,1,0,0,0,320,321,
        5,129,0,0,321,322,3,94,47,0,322,39,1,0,0,0,323,324,5,189,0,0,324,
        325,3,94,47,0,325,41,1,0,0,0,326,327,5,73,0,0,327,334,5,18,0,0,328,
        329,7,0,0,0,329,330,5,223,0,0,330,331,3,92,46,0,331,332,5,239,0,
        0,332,335,1,0,0,0,333,335,3,92,46,0,334,328,1,0,0,0,334,333,1,0,
        0,0,335,43,1,0,0,0,336,337,5,74,0,0,337,338,3,94,47,0,338,45,1,0,
        0,0,339,340,5,122,0,0,340,341,5,18,0,0,341,342,3,66,33,0,342,47,
        1,0,0,0,343,344,5,122,0,0,344,345,5,18,0,0,345,346,3,92,46,0,346,
        49,1,0,0,0,347,348,5,99,0,0,348,351,3,94,47,0,349,350,5,209,0,0,
        350,352,3,94,47,0,351,349,1,0,0,0,351,352,1,0,0,0,352,357,1,0,0,
        0,353,354,5,192,0,0,354,358,5,165,0,0,355,356,5,18,0,0,356,358,3,
        92,46,0,357,353,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,377,
        1,0,0,0,359,360,5,99,0,0,360,363,3,94,47,0,361,362,5,192,0,0,362,
        364,5,165,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,
        366,5,118,0,0,366,367,3,94,47,0,367,377,1,0,0,0,368,369,5,99,0,0,
        369,370,3,94,47,0,370,371,5,118,0,0,371,374,3,94,47,0,372,373,5,
        18,0,0,373,375,3,92,46,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,
        1,0,0,0,376,347,1,0,0,0,376,359,1,0,0,0,376,368,1,0,0,0,377,51,1,
        0,0,0,378,379,5,118,0,0,379,380,3,94,47,0,380,53,1,0,0,0,381,382,
        5,151,0,0,382,383,3,72,36,0,383,55,1,0,0,0,384,385,6,28,-1,0,385,
        387,3,114,57,0,386,388,5,61,0,0,387,386,1,0,0,0,387,388,1,0,0,0,
        388,390,1,0,0,0,389,391,3,64,32,0,390,389,1,0,0,0,390,391,1,0,0,
        0,391,397,1,0,0,0,392,393,5,223,0,0,393,394,3,56,28,0,394,395,5,
        239,0,0,395,397,1,0,0,0,396,384,1,0,0,0,396,392,1,0,0,0,397,412,
        1,0,0,0,398,399,10,3,0,0,399,400,3,60,30,0,400,401,3,56,28,4,401,
        411,1,0,0,0,402,404,10,4,0,0,403,405,3,58,29,0,404,403,1,0,0,0,404,
        405,1,0,0,0,405,406,1,0,0,0,406,407,5,90,0,0,407,408,3,56,28,0,408,
        409,3,62,31,0,409,411,1,0,0,0,410,398,1,0,0,0,410,402,1,0,0,0,411,
        414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,57,1,0,0,0,414,412,
        1,0,0,0,415,417,7,2,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,
        1,0,0,0,418,425,5,84,0,0,419,421,5,84,0,0,420,422,7,2,0,0,421,420,
        1,0,0,0,421,422,1,0,0,0,422,425,1,0,0,0,423,425,7,2,0,0,424,416,
        1,0,0,0,424,419,1,0,0,0,424,423,1,0,0,0,425,459,1,0,0,0,426,428,
        7,3,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,
        7,4,0,0,430,432,5,123,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,441,
        1,0,0,0,433,435,7,4,0,0,434,436,5,123,0,0,435,434,1,0,0,0,435,436,
        1,0,0,0,436,438,1,0,0,0,437,439,7,3,0,0,438,437,1,0,0,0,438,439,
        1,0,0,0,439,441,1,0,0,0,440,427,1,0,0,0,440,433,1,0,0,0,441,459,
        1,0,0,0,442,444,7,5,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,
        1,0,0,0,445,447,5,69,0,0,446,448,5,123,0,0,447,446,1,0,0,0,447,448,
        1,0,0,0,448,457,1,0,0,0,449,451,5,69,0,0,450,452,5,123,0,0,451,450,
        1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,455,7,5,0,0,454,453,
        1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,443,1,0,0,0,456,449,
        1,0,0,0,457,459,1,0,0,0,458,424,1,0,0,0,458,440,1,0,0,0,458,456,
        1,0,0,0,459,59,1,0,0,0,460,461,5,31,0,0,461,464,5,90,0,0,462,464,
        5,209,0,0,463,460,1,0,0,0,463,462,1,0,0,0,464,61,1,0,0,0,465,466,
        5,119,0,0,466,475,3,92,46,0,467,468,5,180,0,0,468,469,5,223,0,0,
        469,470,3,92,46,0,470,471,5,239,0,0,471,475,1,0,0,0,472,473,5,180,
        0,0,473,475,3,92,46,0,474,465,1,0,0,0,474,467,1,0,0,0,474,472,1,
        0,0,0,475,63,1,0,0,0,476,477,5,145,0,0,477,480,3,70,35,0,478,479,
        5,118,0,0,479,481,3,70,35,0,480,478,1,0,0,0,480,481,1,0,0,0,481,
        65,1,0,0,0,482,487,3,68,34,0,483,484,5,209,0,0,484,486,3,68,34,0,
        485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,
        488,67,1,0,0,0,489,487,1,0,0,0,490,492,3,94,47,0,491,493,7,6,0,0,
        492,491,1,0,0,0,492,493,1,0,0,0,493,496,1,0,0,0,494,495,5,117,0,
        0,495,497,7,7,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,500,1,0,0,
        0,498,499,5,26,0,0,499,501,5,203,0,0,500,498,1,0,0,0,500,501,1,0,
        0,0,501,69,1,0,0,0,502,509,3,142,71,0,503,506,3,126,63,0,504,505,
        5,241,0,0,505,507,3,126,63,0,506,504,1,0,0,0,506,507,1,0,0,0,507,
        509,1,0,0,0,508,502,1,0,0,0,508,503,1,0,0,0,509,71,1,0,0,0,510,515,
        3,74,37,0,511,512,5,209,0,0,512,514,3,74,37,0,513,511,1,0,0,0,514,
        517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,73,1,0,0,0,517,515,
        1,0,0,0,518,519,3,138,69,0,519,520,5,215,0,0,520,521,3,128,64,0,
        521,75,1,0,0,0,522,524,3,78,39,0,523,522,1,0,0,0,523,524,1,0,0,0,
        524,526,1,0,0,0,525,527,3,80,40,0,526,525,1,0,0,0,526,527,1,0,0,
        0,527,529,1,0,0,0,528,530,3,82,41,0,529,528,1,0,0,0,529,530,1,0,
        0,0,530,77,1,0,0,0,531,532,5,126,0,0,532,533,5,18,0,0,533,534,3,
        92,46,0,534,79,1,0,0,0,535,536,5,122,0,0,536,537,5,18,0,0,537,538,
        3,66,33,0,538,81,1,0,0,0,539,540,7,8,0,0,540,541,3,84,42,0,541,83,
        1,0,0,0,542,549,3,86,43,0,543,544,5,16,0,0,544,545,3,86,43,0,545,
        546,5,6,0,0,546,547,3,86,43,0,547,549,1,0,0,0,548,542,1,0,0,0,548,
        543,1,0,0,0,549,85,1,0,0,0,550,551,5,33,0,0,551,563,5,143,0,0,552,
        553,5,176,0,0,553,563,5,128,0,0,554,555,5,176,0,0,555,563,5,64,0,
        0,556,557,3,126,63,0,557,558,5,128,0,0,558,563,1,0,0,0,559,560,3,
        126,63,0,560,561,5,64,0,0,561,563,1,0,0,0,562,550,1,0,0,0,562,552,
        1,0,0,0,562,554,1,0,0,0,562,556,1,0,0,0,562,559,1,0,0,0,563,87,1,
        0,0,0,564,565,3,94,47,0,565,566,5,0,0,1,566,89,1,0,0,0,567,615,3,
        138,69,0,568,569,3,138,69,0,569,570,5,223,0,0,570,571,3,138,69,0,
        571,578,3,90,45,0,572,573,5,209,0,0,573,574,3,138,69,0,574,575,3,
        90,45,0,575,577,1,0,0,0,576,572,1,0,0,0,577,580,1,0,0,0,578,576,
        1,0,0,0,578,579,1,0,0,0,579,581,1,0,0,0,580,578,1,0,0,0,581,582,
        5,239,0,0,582,615,1,0,0,0,583,584,3,138,69,0,584,585,5,223,0,0,585,
        590,3,140,70,0,586,587,5,209,0,0,587,589,3,140,70,0,588,586,1,0,
        0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,593,1,0,
        0,0,592,590,1,0,0,0,593,594,5,239,0,0,594,615,1,0,0,0,595,596,3,
        138,69,0,596,597,5,223,0,0,597,602,3,90,45,0,598,599,5,209,0,0,599,
        601,3,90,45,0,600,598,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,
        603,1,0,0,0,603,605,1,0,0,0,604,602,1,0,0,0,605,606,5,239,0,0,606,
        615,1,0,0,0,607,608,3,138,69,0,608,610,5,223,0,0,609,611,3,92,46,
        0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,5,239,
        0,0,613,615,1,0,0,0,614,567,1,0,0,0,614,568,1,0,0,0,614,583,1,0,
        0,0,614,595,1,0,0,0,614,607,1,0,0,0,615,91,1,0,0,0,616,621,3,94,
        47,0,617,618,5,209,0,0,618,620,3,94,47,0,619,617,1,0,0,0,620,623,
        1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,93,1,0,0,0,623,621,1,
        0,0,0,624,625,6,47,-1,0,625,627,5,19,0,0,626,628,3,94,47,0,627,626,
        1,0,0,0,627,628,1,0,0,0,628,634,1,0,0,0,629,630,5,188,0,0,630,631,
        3,94,47,0,631,632,5,164,0,0,632,633,3,94,47,0,633,635,1,0,0,0,634,
        629,1,0,0,0,635,636,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,
        640,1,0,0,0,638,639,5,52,0,0,639,641,3,94,47,0,640,638,1,0,0,0,640,
        641,1,0,0,0,641,642,1,0,0,0,642,643,5,53,0,0,643,748,1,0,0,0,644,
        645,5,20,0,0,645,646,5,223,0,0,646,647,3,94,47,0,647,648,5,10,0,
        0,648,649,3,90,45,0,649,650,5,239,0,0,650,748,1,0,0,0,651,652,5,
        36,0,0,652,748,5,203,0,0,653,654,5,86,0,0,654,655,3,94,47,0,655,
        656,3,130,65,0,656,748,1,0,0,0,657,658,5,156,0,0,658,659,5,223,0,
        0,659,660,3,94,47,0,660,661,5,68,0,0,661,664,3,94,47,0,662,663,5,
        65,0,0,663,665,3,94,47,0,664,662,1,0,0,0,664,665,1,0,0,0,665,666,
        1,0,0,0,666,667,5,239,0,0,667,748,1,0,0,0,668,669,5,167,0,0,669,
        748,5,203,0,0,670,671,5,172,0,0,671,672,5,223,0,0,672,673,7,9,0,
        0,673,674,5,203,0,0,674,675,5,68,0,0,675,676,3,94,47,0,676,677,5,
        239,0,0,677,748,1,0,0,0,678,679,3,138,69,0,679,681,5,223,0,0,680,
        682,3,92,46,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,
        684,5,239,0,0,684,685,1,0,0,0,685,686,5,125,0,0,686,687,5,223,0,
        0,687,688,3,76,38,0,688,689,5,239,0,0,689,748,1,0,0,0,690,691,3,
        138,69,0,691,693,5,223,0,0,692,694,3,92,46,0,693,692,1,0,0,0,693,
        694,1,0,0,0,694,695,1,0,0,0,695,696,5,239,0,0,696,697,1,0,0,0,697,
        698,5,125,0,0,698,699,3,138,69,0,699,748,1,0,0,0,700,706,3,138,69,
        0,701,703,5,223,0,0,702,704,3,92,46,0,703,702,1,0,0,0,703,704,1,
        0,0,0,704,705,1,0,0,0,705,707,5,239,0,0,706,701,1,0,0,0,706,707,
        1,0,0,0,707,708,1,0,0,0,708,710,5,223,0,0,709,711,5,49,0,0,710,709,
        1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,714,3,96,48,0,713,712,
        1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,5,239,0,0,716,748,
        1,0,0,0,717,748,3,102,51,0,718,748,3,128,64,0,719,720,5,211,0,0,
        720,748,3,94,47,18,721,722,5,115,0,0,722,748,3,94,47,12,723,724,
        3,118,59,0,724,725,5,213,0,0,725,727,1,0,0,0,726,723,1,0,0,0,726,
        727,1,0,0,0,727,728,1,0,0,0,728,748,5,205,0,0,729,730,5,223,0,0,
        730,731,3,22,11,0,731,732,5,239,0,0,732,748,1,0,0,0,733,734,5,223,
        0,0,734,735,3,94,47,0,735,736,5,239,0,0,736,748,1,0,0,0,737,738,
        5,223,0,0,738,739,3,92,46,0,739,740,5,239,0,0,740,748,1,0,0,0,741,
        743,5,222,0,0,742,744,3,92,46,0,743,742,1,0,0,0,743,744,1,0,0,0,
        744,745,1,0,0,0,745,748,5,238,0,0,746,748,3,110,55,0,747,624,1,0,
        0,0,747,644,1,0,0,0,747,651,1,0,0,0,747,653,1,0,0,0,747,657,1,0,
        0,0,747,668,1,0,0,0,747,670,1,0,0,0,747,678,1,0,0,0,747,690,1,0,
        0,0,747,700,1,0,0,0,747,717,1,0,0,0,747,718,1,0,0,0,747,719,1,0,
        0,0,747,721,1,0,0,0,747,726,1,0,0,0,747,729,1,0,0,0,747,733,1,0,
        0,0,747,737,1,0,0,0,747,741,1,0,0,0,747,746,1,0,0,0,748,842,1,0,
        0,0,749,753,10,17,0,0,750,754,5,205,0,0,751,754,5,241,0,0,752,754,
        5,230,0,0,753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,755,
        1,0,0,0,755,841,3,94,47,18,756,760,10,16,0,0,757,761,5,231,0,0,758,
        761,5,211,0,0,759,761,5,210,0,0,760,757,1,0,0,0,760,758,1,0,0,0,
        760,759,1,0,0,0,761,762,1,0,0,0,762,841,3,94,47,17,763,788,10,15,
        0,0,764,789,5,214,0,0,765,789,5,215,0,0,766,789,5,226,0,0,767,789,
        5,224,0,0,768,789,5,225,0,0,769,789,5,216,0,0,770,789,5,217,0,0,
        771,773,5,115,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,
        0,774,776,5,80,0,0,775,777,5,25,0,0,776,775,1,0,0,0,776,777,1,0,
        0,0,777,789,1,0,0,0,778,780,5,115,0,0,779,778,1,0,0,0,779,780,1,
        0,0,0,780,781,1,0,0,0,781,789,7,10,0,0,782,789,5,235,0,0,783,789,
        5,236,0,0,784,789,5,228,0,0,785,789,5,219,0,0,786,789,5,220,0,0,
        787,789,5,227,0,0,788,764,1,0,0,0,788,765,1,0,0,0,788,766,1,0,0,
        0,788,767,1,0,0,0,788,768,1,0,0,0,788,769,1,0,0,0,788,770,1,0,0,
        0,788,772,1,0,0,0,788,779,1,0,0,0,788,782,1,0,0,0,788,783,1,0,0,
        0,788,784,1,0,0,0,788,785,1,0,0,0,788,786,1,0,0,0,788,787,1,0,0,
        0,789,790,1,0,0,0,790,841,3,94,47,16,791,792,10,13,0,0,792,793,5,
        229,0,0,793,841,3,94,47,14,794,795,10,11,0,0,795,796,5,6,0,0,796,
        841,3,94,47,12,797,798,10,10,0,0,798,799,5,121,0,0,799,841,3,94,
        47,11,800,802,10,9,0,0,801,803,5,115,0,0,802,801,1,0,0,0,802,803,
        1,0,0,0,803,804,1,0,0,0,804,805,5,16,0,0,805,806,3,94,47,0,806,807,
        5,6,0,0,807,808,3,94,47,10,808,841,1,0,0,0,809,810,10,8,0,0,810,
        811,5,232,0,0,811,812,3,94,47,0,812,813,5,208,0,0,813,814,3,94,47,
        8,814,841,1,0,0,0,815,816,10,21,0,0,816,817,5,222,0,0,817,818,3,
        94,47,0,818,819,5,238,0,0,819,841,1,0,0,0,820,821,10,20,0,0,821,
        822,5,213,0,0,822,841,5,201,0,0,823,824,10,19,0,0,824,825,5,213,
        0,0,825,841,3,138,69,0,826,827,10,14,0,0,827,829,5,88,0,0,828,830,
        5,115,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,841,
        5,116,0,0,832,838,10,7,0,0,833,839,3,136,68,0,834,835,5,10,0,0,835,
        839,3,138,69,0,836,837,5,10,0,0,837,839,5,203,0,0,838,833,1,0,0,
        0,838,834,1,0,0,0,838,836,1,0,0,0,839,841,1,0,0,0,840,749,1,0,0,
        0,840,756,1,0,0,0,840,763,1,0,0,0,840,791,1,0,0,0,840,794,1,0,0,
        0,840,797,1,0,0,0,840,800,1,0,0,0,840,809,1,0,0,0,840,815,1,0,0,
        0,840,820,1,0,0,0,840,823,1,0,0,0,840,826,1,0,0,0,840,832,1,0,0,
        0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,95,1,0,0,0,
        844,842,1,0,0,0,845,850,3,98,49,0,846,847,5,209,0,0,847,849,3,98,
        49,0,848,846,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,
        0,0,851,97,1,0,0,0,852,850,1,0,0,0,853,856,3,100,50,0,854,856,3,
        94,47,0,855,853,1,0,0,0,855,854,1,0,0,0,856,99,1,0,0,0,857,858,5,
        223,0,0,858,863,3,138,69,0,859,860,5,209,0,0,860,862,3,138,69,0,
        861,859,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,
        864,866,1,0,0,0,865,863,1,0,0,0,866,867,5,239,0,0,867,877,1,0,0,
        0,868,873,3,138,69,0,869,870,5,209,0,0,870,872,3,138,69,0,871,869,
        1,0,0,0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,877,
        1,0,0,0,875,873,1,0,0,0,876,857,1,0,0,0,876,868,1,0,0,0,877,878,
        1,0,0,0,878,879,5,204,0,0,879,880,3,94,47,0,880,101,1,0,0,0,881,
        882,5,225,0,0,882,886,3,138,69,0,883,885,3,104,52,0,884,883,1,0,
        0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,
        0,0,888,886,1,0,0,0,889,890,5,241,0,0,890,891,5,217,0,0,891,910,
        1,0,0,0,892,893,5,225,0,0,893,897,3,138,69,0,894,896,3,104,52,0,
        895,894,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,1,0,0,0,
        898,900,1,0,0,0,899,897,1,0,0,0,900,902,5,217,0,0,901,903,3,102,
        51,0,902,901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,5,225,
        0,0,905,906,5,241,0,0,906,907,3,138,69,0,907,908,5,217,0,0,908,910,
        1,0,0,0,909,881,1,0,0,0,909,892,1,0,0,0,910,103,1,0,0,0,911,912,
        3,138,69,0,912,913,5,215,0,0,913,914,5,203,0,0,914,923,1,0,0,0,915,
        916,3,138,69,0,916,917,5,215,0,0,917,918,5,221,0,0,918,919,3,94,
        47,0,919,920,5,237,0,0,920,923,1,0,0,0,921,923,3,138,69,0,922,911,
        1,0,0,0,922,915,1,0,0,0,922,921,1,0,0,0,923,105,1,0,0,0,924,929,
        3,108,54,0,925,926,5,209,0,0,926,928,3,108,54,0,927,925,1,0,0,0,
        928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,107,1,0,0,0,
        931,929,1,0,0,0,932,933,3,138,69,0,933,934,5,10,0,0,934,935,5,223,
        0,0,935,936,3,22,11,0,936,937,5,239,0,0,937,943,1,0,0,0,938,939,
        3,94,47,0,939,940,5,10,0,0,940,941,3,138,69,0,941,943,1,0,0,0,942,
        932,1,0,0,0,942,938,1,0,0,0,943,109,1,0,0,0,944,952,3,142,71,0,945,
        946,3,118,59,0,946,947,5,213,0,0,947,949,1,0,0,0,948,945,1,0,0,0,
        948,949,1,0,0,0,949,950,1,0,0,0,950,952,3,112,56,0,951,944,1,0,0,
        0,951,948,1,0,0,0,952,111,1,0,0,0,953,958,3,138,69,0,954,955,5,213,
        0,0,955,957,3,138,69,0,956,954,1,0,0,0,957,960,1,0,0,0,958,956,1,
        0,0,0,958,959,1,0,0,0,959,113,1,0,0,0,960,958,1,0,0,0,961,962,6,
        57,-1,0,962,971,3,118,59,0,963,971,3,116,58,0,964,965,5,223,0,0,
        965,966,3,22,11,0,966,967,5,239,0,0,967,971,1,0,0,0,968,971,3,102,
        51,0,969,971,3,142,71,0,970,961,1,0,0,0,970,963,1,0,0,0,970,964,
        1,0,0,0,970,968,1,0,0,0,970,969,1,0,0,0,971,980,1,0,0,0,972,976,
        10,3,0,0,973,977,3,136,68,0,974,975,5,10,0,0,975,977,3,138,69,0,
        976,973,1,0,0,0,976,974,1,0,0,0,977,979,1,0,0,0,978,972,1,0,0,0,
        979,982,1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,115,1,0,0,0,
        982,980,1,0,0,0,983,984,3,138,69,0,984,986,5,223,0,0,985,987,3,120,
        60,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,5,239,
        0,0,989,117,1,0,0,0,990,991,3,122,61,0,991,992,5,213,0,0,992,994,
        1,0,0,0,993,990,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,
        3,138,69,0,996,119,1,0,0,0,997,1002,3,94,47,0,998,999,5,209,0,0,
        999,1001,3,94,47,0,1000,998,1,0,0,0,1001,1004,1,0,0,0,1002,1000,
        1,0,0,0,1002,1003,1,0,0,0,1003,121,1,0,0,0,1004,1002,1,0,0,0,1005,
        1006,3,138,69,0,1006,123,1,0,0,0,1007,1016,5,199,0,0,1008,1009,5,
        213,0,0,1009,1016,7,11,0,0,1010,1011,5,201,0,0,1011,1013,5,213,0,
        0,1012,1014,7,11,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1016,
        1,0,0,0,1015,1007,1,0,0,0,1015,1008,1,0,0,0,1015,1010,1,0,0,0,1016,
        125,1,0,0,0,1017,1019,7,12,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,
        0,1019,1026,1,0,0,0,1020,1027,3,124,62,0,1021,1027,5,200,0,0,1022,
        1027,5,201,0,0,1023,1027,5,202,0,0,1024,1027,5,82,0,0,1025,1027,
        5,113,0,0,1026,1020,1,0,0,0,1026,1021,1,0,0,0,1026,1022,1,0,0,0,
        1026,1023,1,0,0,0,1026,1024,1,0,0,0,1026,1025,1,0,0,0,1027,127,1,
        0,0,0,1028,1032,3,126,63,0,1029,1032,5,203,0,0,1030,1032,5,116,0,
        0,1031,1028,1,0,0,0,1031,1029,1,0,0,0,1031,1030,1,0,0,0,1032,129,
        1,0,0,0,1033,1034,7,13,0,0,1034,131,1,0,0,0,1035,1036,7,14,0,0,1036,
        133,1,0,0,0,1037,1038,7,15,0,0,1038,135,1,0,0,0,1039,1042,5,198,
        0,0,1040,1042,3,134,67,0,1041,1039,1,0,0,0,1041,1040,1,0,0,0,1042,
        137,1,0,0,0,1043,1047,5,198,0,0,1044,1047,3,130,65,0,1045,1047,3,
        132,66,0,1046,1043,1,0,0,0,1046,1044,1,0,0,0,1046,1045,1,0,0,0,1047,
        139,1,0,0,0,1048,1049,5,203,0,0,1049,1050,5,215,0,0,1050,1051,3,
        126,63,0,1051,141,1,0,0,0,1052,1053,5,221,0,0,1053,1054,3,138,69,
        0,1054,1055,5,237,0,0,1055,143,1,0,0,0,127,147,154,161,166,176,188,
        204,212,222,231,234,238,241,245,248,251,254,257,261,265,268,271,
        274,278,281,290,296,317,334,351,357,363,374,376,387,390,396,404,
        410,412,416,421,424,427,431,435,438,440,443,447,451,454,456,458,
        463,474,480,487,492,496,500,506,508,515,523,526,529,548,562,578,
        590,602,610,614,621,627,636,640,664,681,693,703,706,710,713,726,
        743,747,753,760,772,776,779,788,802,829,838,840,842,850,855,863,
        873,876,886,897,902,909,922,929,942,948,951,958,970,976,980,986,
        993,1002,1013,1015,1018,1026,1031,1041,1046
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'false'", "'true'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'->'", "'*'", 
                     "'`'", "'\\'", "':'", "','", "'||'", "'-'", "'$'", 
                     "'.'", "'=='", "'='", "'>='", "'>'", "'#'", "'~*'", 
                     "'=~*'", "'{'", "'['", "'('", "'<='", "'<'", "<INVALID>", 
                     "'!~*'", "'!~'", "'??'", "'%'", "'+'", "'?'", "'\"'", 
                     "'''", "'~'", "'=~'", "'}'", "']'", "')'", "';'", "'/'", 
                     "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COHORT", "COLLATE", "COLUMN", "COMMENT", 
                      "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
                      "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", 
                      "DESCRIBE", "DETACH", "DICTIONARIES", "DICTIONARY", 
                      "DISK", "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", 
                      "END", "ENGINE", "EVENTS", "EXISTS", "EXPLAIN", "EXPRESSION", 
                      "EXTRACT", "FETCHES", "FINAL", "FIRST", "FLUSH", "FOLLOWING", 
                      "FOR", "FORMAT", "FREEZE", "FROM", "FULL", "FUNCTION", 
                      "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", 
                      "INJECTIVE", "INNER", "INSERT", "INTERVAL", "INTO", 
                      "IS", "IS_OBJECT_ID", "JOIN", "KEY", "KILL", "LAST", 
                      "LAYOUT", "LEADING", "LEFT", "LIFETIME", "LIKE", "LIMIT", 
                      "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
                      "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", 
                      "MOVE", "MUTATION", "NAN_SQL", "NO", "NOT", "NULL_SQL", 
                      "NULLS", "OFFSET", "ON", "OPTIMIZE", "OR", "ORDER", 
                      "OUTER", "OUTFILE", "OVER", "PARTITION", "POPULATE", 
                      "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
                      "QUARTER", "RANGE", "RELOAD", "REMOVE", "RENAME", 
                      "REPLACE", "REPLICA", "REPLICATED", "RETURN", "RIGHT", 
                      "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                      "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", "SOURCE", 
                      "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", 
                      "TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", 
                      "TIMEOUT", "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", 
                      "TRIM", "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", 
                      "UPDATE", "USE", "USING", "UUID", "VALUES", "VAR", 
                      "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", "WHERE", 
                      "WHILE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
                      "ESCAPE_CHAR_SINGLE", "ESCAPE_CHAR_DOUBLE", "IDENTIFIER", 
                      "FLOATING_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", 
                      "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW", 
                      "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", 
                      "CONCAT", "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", "EQ_SINGLE", 
                      "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", "IREGEX_DOUBLE", 
                      "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", "LT", "NOT_EQ", 
                      "NOT_IREGEX", "NOT_REGEX", "NULLISH", "PERCENT", "PLUS", 
                      "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", "REGEX_SINGLE", 
                      "REGEX_DOUBLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_statement = 4
    RULE_exprStmt = 5
    RULE_ifStmt = 6
    RULE_whileStmt = 7
    RULE_returnStmt = 8
    RULE_block = 9
    RULE_select = 10
    RULE_selectUnionStmt = 11
    RULE_selectStmtWithParens = 12
    RULE_selectStmt = 13
    RULE_withClause = 14
    RULE_topClause = 15
    RULE_fromClause = 16
    RULE_arrayJoinClause = 17
    RULE_windowClause = 18
    RULE_prewhereClause = 19
    RULE_whereClause = 20
    RULE_groupByClause = 21
    RULE_havingClause = 22
    RULE_orderByClause = 23
    RULE_projectionOrderByClause = 24
    RULE_limitAndOffsetClause = 25
    RULE_offsetOnlyClause = 26
    RULE_settingsClause = 27
    RULE_joinExpr = 28
    RULE_joinOp = 29
    RULE_joinOpCross = 30
    RULE_joinConstraintClause = 31
    RULE_sampleClause = 32
    RULE_orderExprList = 33
    RULE_orderExpr = 34
    RULE_ratioExpr = 35
    RULE_settingExprList = 36
    RULE_settingExpr = 37
    RULE_windowExpr = 38
    RULE_winPartitionByClause = 39
    RULE_winOrderByClause = 40
    RULE_winFrameClause = 41
    RULE_winFrameExtend = 42
    RULE_winFrameBound = 43
    RULE_expr = 44
    RULE_columnTypeExpr = 45
    RULE_columnExprList = 46
    RULE_columnExpr = 47
    RULE_columnArgList = 48
    RULE_columnArgExpr = 49
    RULE_columnLambdaExpr = 50
    RULE_hogqlxTagElement = 51
    RULE_hogqlxTagAttribute = 52
    RULE_withExprList = 53
    RULE_withExpr = 54
    RULE_columnIdentifier = 55
    RULE_nestedIdentifier = 56
    RULE_tableExpr = 57
    RULE_tableFunctionExpr = 58
    RULE_tableIdentifier = 59
    RULE_tableArgList = 60
    RULE_databaseIdentifier = 61
    RULE_floatingLiteral = 62
    RULE_numberLiteral = 63
    RULE_literal = 64
    RULE_interval = 65
    RULE_keyword = 66
    RULE_keywordForAlias = 67
    RULE_alias = 68
    RULE_identifier = 69
    RULE_enumValue = 70
    RULE_placeholder = 71

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "statement", 
                   "exprStmt", "ifStmt", "whileStmt", "returnStmt", "block", 
                   "select", "selectUnionStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExpr", 
                   "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "hogqlxTagElement", "hogqlxTagAttribute", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "databaseIdentifier", "floatingLiteral", "numberLiteral", 
                   "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COHORT=25
    COLLATE=26
    COLUMN=27
    COMMENT=28
    CONSTRAINT=29
    CREATE=30
    CROSS=31
    CUBE=32
    CURRENT=33
    DATABASE=34
    DATABASES=35
    DATE=36
    DAY=37
    DEDUPLICATE=38
    DEFAULT=39
    DELAY=40
    DELETE=41
    DESC=42
    DESCENDING=43
    DESCRIBE=44
    DETACH=45
    DICTIONARIES=46
    DICTIONARY=47
    DISK=48
    DISTINCT=49
    DISTRIBUTED=50
    DROP=51
    ELSE=52
    END=53
    ENGINE=54
    EVENTS=55
    EXISTS=56
    EXPLAIN=57
    EXPRESSION=58
    EXTRACT=59
    FETCHES=60
    FINAL=61
    FIRST=62
    FLUSH=63
    FOLLOWING=64
    FOR=65
    FORMAT=66
    FREEZE=67
    FROM=68
    FULL=69
    FUNCTION=70
    GLOBAL=71
    GRANULARITY=72
    GROUP=73
    HAVING=74
    HIERARCHICAL=75
    HOUR=76
    ID=77
    IF=78
    ILIKE=79
    IN=80
    INDEX=81
    INF=82
    INJECTIVE=83
    INNER=84
    INSERT=85
    INTERVAL=86
    INTO=87
    IS=88
    IS_OBJECT_ID=89
    JOIN=90
    KEY=91
    KILL=92
    LAST=93
    LAYOUT=94
    LEADING=95
    LEFT=96
    LIFETIME=97
    LIKE=98
    LIMIT=99
    LIVE=100
    LOCAL=101
    LOGS=102
    MATERIALIZE=103
    MATERIALIZED=104
    MAX=105
    MERGES=106
    MIN=107
    MINUTE=108
    MODIFY=109
    MONTH=110
    MOVE=111
    MUTATION=112
    NAN_SQL=113
    NO=114
    NOT=115
    NULL_SQL=116
    NULLS=117
    OFFSET=118
    ON=119
    OPTIMIZE=120
    OR=121
    ORDER=122
    OUTER=123
    OUTFILE=124
    OVER=125
    PARTITION=126
    POPULATE=127
    PRECEDING=128
    PREWHERE=129
    PRIMARY=130
    PROJECTION=131
    QUARTER=132
    RANGE=133
    RELOAD=134
    REMOVE=135
    RENAME=136
    REPLACE=137
    REPLICA=138
    REPLICATED=139
    RETURN=140
    RIGHT=141
    ROLLUP=142
    ROW=143
    ROWS=144
    SAMPLE=145
    SECOND=146
    SELECT=147
    SEMI=148
    SENDS=149
    SET=150
    SETTINGS=151
    SHOW=152
    SOURCE=153
    START=154
    STOP=155
    SUBSTRING=156
    SYNC=157
    SYNTAX=158
    SYSTEM=159
    TABLE=160
    TABLES=161
    TEMPORARY=162
    TEST=163
    THEN=164
    TIES=165
    TIMEOUT=166
    TIMESTAMP=167
    TO=168
    TOP=169
    TOTALS=170
    TRAILING=171
    TRIM=172
    TRUNCATE=173
    TTL=174
    TYPE=175
    UNBOUNDED=176
    UNION=177
    UPDATE=178
    USE=179
    USING=180
    UUID=181
    VALUES=182
    VAR=183
    VIEW=184
    VOLUME=185
    WATCH=186
    WEEK=187
    WHEN=188
    WHERE=189
    WHILE=190
    WINDOW=191
    WITH=192
    YEAR=193
    JSON_FALSE=194
    JSON_TRUE=195
    ESCAPE_CHAR_SINGLE=196
    ESCAPE_CHAR_DOUBLE=197
    IDENTIFIER=198
    FLOATING_LITERAL=199
    OCTAL_LITERAL=200
    DECIMAL_LITERAL=201
    HEXADECIMAL_LITERAL=202
    STRING_LITERAL=203
    ARROW=204
    ASTERISK=205
    BACKQUOTE=206
    BACKSLASH=207
    COLON=208
    COMMA=209
    CONCAT=210
    DASH=211
    DOLLAR=212
    DOT=213
    EQ_DOUBLE=214
    EQ_SINGLE=215
    GT_EQ=216
    GT=217
    HASH=218
    IREGEX_SINGLE=219
    IREGEX_DOUBLE=220
    LBRACE=221
    LBRACKET=222
    LPAREN=223
    LT_EQ=224
    LT=225
    NOT_EQ=226
    NOT_IREGEX=227
    NOT_REGEX=228
    NULLISH=229
    PERCENT=230
    PLUS=231
    QUERY=232
    QUOTE_DOUBLE=233
    QUOTE_SINGLE=234
    REGEX_SINGLE=235
    REGEX_DOUBLE=236
    RBRACE=237
    RBRACKET=238
    RPAREN=239
    SEMICOLON=240
    SLASH=241
    UNDERSCORE=242
    MULTI_LINE_COMMENT=243
    SINGLE_LINE_COMMENT=244
    WHITESPACE=245

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                self.state = 144
                self.declaration()
                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 150
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 152
                self.varDecl()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 211, 213, 221, 222, 223, 225, 231]:
                self.enterOuterAlt(localctx, 2)
                self.state = 153
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(HogQLParser.VAR, 0)

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self.match(HogQLParser.VAR)
            self.state = 161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [198]:
                self.state = 159
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 195]:
                self.state = 160
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208:
                self.state = 163
                self.match(HogQLParser.COLON)
                self.state = 164
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 165
                self.expression()


            self.state = 168
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statement)
        try:
            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self.exprStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 172
                self.ifStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 173
                self.whileStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 174
                self.returnStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 175
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.expression()
            self.state = 179
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.match(HogQLParser.IF)
            self.state = 182
            self.match(HogQLParser.LPAREN)
            self.state = 183
            self.expression()
            self.state = 184
            self.match(HogQLParser.RPAREN)
            self.state = 185
            self.statement()
            self.state = 188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 186
                self.match(HogQLParser.ELSE)
                self.state = 187
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(HogQLParser.WHILE)
            self.state = 191
            self.match(HogQLParser.LPAREN)
            self.state = 192
            self.expression()
            self.state = 193
            self.match(HogQLParser.RPAREN)
            self.state = 194
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(HogQLParser.RETURN)
            self.state = 197
            self.expression()
            self.state = 198
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(HogQLParser.LBRACE)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                self.state = 201
                self.declaration()
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 207
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 209
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 210
                self.selectStmt()
                pass

            elif la_ == 3:
                self.state = 211
                self.hogqlxTagElement()
                pass


            self.state = 214
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.selectStmtWithParens()
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==177:
                self.state = 217
                self.match(HogQLParser.UNION)
                self.state = 218
                self.match(HogQLParser.ALL)
                self.state = 219
                self.selectStmtWithParens()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_selectStmtWithParens)
        try:
            self.state = 231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [147, 192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                self.selectStmt()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self.match(HogQLParser.LPAREN)
                self.state = 227
                self.selectUnionStmt()
                self.state = 228
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 3)
                self.state = 230
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 233
                localctx.with_ = self.withClause()


            self.state = 236
            self.match(HogQLParser.SELECT)
            self.state = 238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 237
                self.match(HogQLParser.DISTINCT)


            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 240
                self.topClause()


            self.state = 243
            localctx.columns = self.columnExprList()
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 244
                localctx.from_ = self.fromClause()


            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==84 or _la==96:
                self.state = 247
                self.arrayJoinClause()


            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 250
                self.prewhereClause()


            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 253
                localctx.where = self.whereClause()


            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 256
                self.groupByClause()


            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 259
                self.match(HogQLParser.WITH)
                self.state = 260
                _la = self._input.LA(1)
                if not(_la==32 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 263
                self.match(HogQLParser.WITH)
                self.state = 264
                self.match(HogQLParser.TOTALS)


            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 267
                self.havingClause()


            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==191:
                self.state = 270
                self.windowClause()


            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 273
                self.orderByClause()


            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99]:
                self.state = 276
                self.limitAndOffsetClause()
                pass
            elif token in [118]:
                self.state = 277
                self.offsetOnlyClause()
                pass
            elif token in [-1, 151, 177, 239]:
                pass
            else:
                pass
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 280
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(HogQLParser.WITH)
            self.state = 284
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(HogQLParser.TOP)
            self.state = 287
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 288
                self.match(HogQLParser.WITH)
                self.state = 289
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(HogQLParser.FROM)
            self.state = 293
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84 or _la==96:
                self.state = 295
                _la = self._input.LA(1)
                if not(_la==84 or _la==96):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 298
            self.match(HogQLParser.ARRAY)
            self.state = 299
            self.match(HogQLParser.JOIN)
            self.state = 300
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(HogQLParser.WINDOW)
            self.state = 303
            self.identifier()
            self.state = 304
            self.match(HogQLParser.AS)
            self.state = 305
            self.match(HogQLParser.LPAREN)
            self.state = 306
            self.windowExpr()
            self.state = 307
            self.match(HogQLParser.RPAREN)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==209:
                self.state = 308
                self.match(HogQLParser.COMMA)
                self.state = 309
                self.identifier()
                self.state = 310
                self.match(HogQLParser.AS)
                self.state = 311
                self.match(HogQLParser.LPAREN)
                self.state = 312
                self.windowExpr()
                self.state = 313
                self.match(HogQLParser.RPAREN)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(HogQLParser.PREWHERE)
            self.state = 321
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(HogQLParser.WHERE)
            self.state = 324
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(HogQLParser.GROUP)
            self.state = 327
            self.match(HogQLParser.BY)
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 328
                _la = self._input.LA(1)
                if not(_la==32 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 329
                self.match(HogQLParser.LPAREN)
                self.state = 330
                self.columnExprList()
                self.state = 331
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 333
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(HogQLParser.HAVING)
            self.state = 337
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(HogQLParser.ORDER)
            self.state = 340
            self.match(HogQLParser.BY)
            self.state = 341
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(HogQLParser.ORDER)
            self.state = 344
            self.match(HogQLParser.BY)
            self.state = 345
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                self.match(HogQLParser.LIMIT)
                self.state = 348
                self.columnExpr(0)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==209:
                    self.state = 349
                    self.match(HogQLParser.COMMA)
                    self.state = 350
                    self.columnExpr(0)


                self.state = 357
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [192]:
                    self.state = 353
                    self.match(HogQLParser.WITH)
                    self.state = 354
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [18]:
                    self.state = 355
                    self.match(HogQLParser.BY)
                    self.state = 356
                    self.columnExprList()
                    pass
                elif token in [-1, 151, 177, 239]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.match(HogQLParser.LIMIT)
                self.state = 360
                self.columnExpr(0)
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 361
                    self.match(HogQLParser.WITH)
                    self.state = 362
                    self.match(HogQLParser.TIES)


                self.state = 365
                self.match(HogQLParser.OFFSET)
                self.state = 366
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                self.match(HogQLParser.LIMIT)
                self.state = 369
                self.columnExpr(0)
                self.state = 370
                self.match(HogQLParser.OFFSET)
                self.state = 371
                self.columnExpr(0)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 372
                    self.match(HogQLParser.BY)
                    self.state = 373
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(HogQLParser.OFFSET)
            self.state = 379
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(HogQLParser.SETTINGS)
            self.state = 382
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 385
                self.tableExpr(0)
                self.state = 387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 386
                    self.match(HogQLParser.FINAL)


                self.state = 390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 389
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 392
                self.match(HogQLParser.LPAREN)
                self.state = 393
                self.joinExpr(0)
                self.state = 394
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 398
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 399
                        self.joinOpCross()
                        self.state = 400
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 402
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 404
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 134250497) != 0) or _la==141 or _la==148:
                            self.state = 403
                            self.joinOp()


                        self.state = 406
                        self.match(HogQLParser.JOIN)
                        self.state = 407
                        self.joinExpr(0)
                        self.state = 408
                        self.joinConstraintClause()
                        pass

             
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 415
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 418
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 419
                    self.match(HogQLParser.INNER)
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 420
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 423
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==148:
                        self.state = 426
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==148):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 429
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 430
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 433
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 434
                        self.match(HogQLParser.OUTER)


                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==148:
                        self.state = 437
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==148):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 442
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 445
                    self.match(HogQLParser.FULL)
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 446
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 449
                    self.match(HogQLParser.FULL)
                    self.state = 451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 450
                        self.match(HogQLParser.OUTER)


                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 453
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_joinOpCross)
        try:
            self.state = 463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.match(HogQLParser.CROSS)
                self.state = 461
                self.match(HogQLParser.JOIN)
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_joinConstraintClause)
        try:
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.match(HogQLParser.ON)
                self.state = 466
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.match(HogQLParser.USING)
                self.state = 468
                self.match(HogQLParser.LPAREN)
                self.state = 469
                self.columnExprList()
                self.state = 470
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 472
                self.match(HogQLParser.USING)
                self.state = 473
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(HogQLParser.SAMPLE)
            self.state = 477
            self.ratioExpr()
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 478
                self.match(HogQLParser.OFFSET)
                self.state = 479
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.orderExpr()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==209:
                self.state = 483
                self.match(HogQLParser.COMMA)
                self.state = 484
                self.orderExpr()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.columnExpr(0)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194139535360) != 0):
                self.state = 491
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13194139535360) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 494
                self.match(HogQLParser.NULLS)
                self.state = 495
                _la = self._input.LA(1)
                if not(_la==62 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 498
                self.match(HogQLParser.COLLATE)
                self.state = 499
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ratioExpr)
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [221]:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.placeholder()
                pass
            elif token in [82, 113, 199, 200, 201, 202, 211, 213, 231]:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.numberLiteral()
                self.state = 506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 504
                    self.match(HogQLParser.SLASH)
                    self.state = 505
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.settingExpr()
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==209:
                self.state = 511
                self.match(HogQLParser.COMMA)
                self.state = 512
                self.settingExpr()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.identifier()
            self.state = 519
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 520
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 522
                self.winPartitionByClause()


            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 525
                self.winOrderByClause()


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==144:
                self.state = 528
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(HogQLParser.PARTITION)
            self.state = 532
            self.match(HogQLParser.BY)
            self.state = 533
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(HogQLParser.ORDER)
            self.state = 536
            self.match(HogQLParser.BY)
            self.state = 537
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if not(_la==133 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 540
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_winFrameExtend)
        try:
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33, 82, 113, 176, 199, 200, 201, 202, 211, 213, 231]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(HogQLParser.BETWEEN)
                self.state = 544
                self.winFrameBound()
                self.state = 545
                self.match(HogQLParser.AND)
                self.state = 546
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 550
                self.match(HogQLParser.CURRENT)
                self.state = 551
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 552
                self.match(HogQLParser.UNBOUNDED)
                self.state = 553
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 554
                self.match(HogQLParser.UNBOUNDED)
                self.state = 555
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 556
                self.numberLiteral()
                self.state = 557
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 559
                self.numberLiteral()
                self.state = 560
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.columnExpr(0)
            self.state = 565
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.identifier()
                self.state = 569
                self.match(HogQLParser.LPAREN)
                self.state = 570
                self.identifier()
                self.state = 571
                self.columnTypeExpr()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==209:
                    self.state = 572
                    self.match(HogQLParser.COMMA)
                    self.state = 573
                    self.identifier()
                    self.state = 574
                    self.columnTypeExpr()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 581
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.identifier()
                self.state = 584
                self.match(HogQLParser.LPAREN)
                self.state = 585
                self.enumValue()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==209:
                    self.state = 586
                    self.match(HogQLParser.COMMA)
                    self.state = 587
                    self.enumValue()
                    self.state = 592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 593
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 595
                self.identifier()
                self.state = 596
                self.match(HogQLParser.LPAREN)
                self.state = 597
                self.columnTypeExpr()
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==209:
                    self.state = 598
                    self.match(HogQLParser.COMMA)
                    self.state = 599
                    self.columnTypeExpr()
                    self.state = 604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 605
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 607
                self.identifier()
                self.state = 608
                self.match(HogQLParser.LPAREN)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                    self.state = 609
                    self.columnExprList()


                self.state = 612
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.columnExpr(0)
            self.state = 621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 617
                    self.match(HogQLParser.COMMA)
                    self.state = 618
                    self.columnExpr(0) 
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 625
                self.match(HogQLParser.CASE)
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 626
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 634 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 629
                    self.match(HogQLParser.WHEN)
                    self.state = 630
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 631
                    self.match(HogQLParser.THEN)
                    self.state = 632
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 636 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==188):
                        break

                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 638
                    self.match(HogQLParser.ELSE)
                    self.state = 639
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 642
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 644
                self.match(HogQLParser.CAST)
                self.state = 645
                self.match(HogQLParser.LPAREN)
                self.state = 646
                self.columnExpr(0)
                self.state = 647
                self.match(HogQLParser.AS)
                self.state = 648
                self.columnTypeExpr()
                self.state = 649
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 651
                self.match(HogQLParser.DATE)
                self.state = 652
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 653
                self.match(HogQLParser.INTERVAL)
                self.state = 654
                self.columnExpr(0)
                self.state = 655
                self.interval()
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 657
                self.match(HogQLParser.SUBSTRING)
                self.state = 658
                self.match(HogQLParser.LPAREN)
                self.state = 659
                self.columnExpr(0)
                self.state = 660
                self.match(HogQLParser.FROM)
                self.state = 661
                self.columnExpr(0)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 662
                    self.match(HogQLParser.FOR)
                    self.state = 663
                    self.columnExpr(0)


                self.state = 666
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 668
                self.match(HogQLParser.TIMESTAMP)
                self.state = 669
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 670
                self.match(HogQLParser.TRIM)
                self.state = 671
                self.match(HogQLParser.LPAREN)
                self.state = 672
                _la = self._input.LA(1)
                if not(_la==17 or _la==95 or _la==171):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 673
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 674
                self.match(HogQLParser.FROM)
                self.state = 675
                self.columnExpr(0)
                self.state = 676
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 678
                self.identifier()

                self.state = 679
                self.match(HogQLParser.LPAREN)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                    self.state = 680
                    self.columnExprList()


                self.state = 683
                self.match(HogQLParser.RPAREN)
                self.state = 685
                self.match(HogQLParser.OVER)
                self.state = 686
                self.match(HogQLParser.LPAREN)
                self.state = 687
                self.windowExpr()
                self.state = 688
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 690
                self.identifier()

                self.state = 691
                self.match(HogQLParser.LPAREN)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                    self.state = 692
                    self.columnExprList()


                self.state = 695
                self.match(HogQLParser.RPAREN)
                self.state = 697
                self.match(HogQLParser.OVER)
                self.state = 698
                self.identifier()
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 700
                self.identifier()
                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 701
                    self.match(HogQLParser.LPAREN)
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                        self.state = 702
                        self.columnExprList()


                    self.state = 705
                    self.match(HogQLParser.RPAREN)


                self.state = 708
                self.match(HogQLParser.LPAREN)
                self.state = 710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 709
                    self.match(HogQLParser.DISTINCT)


                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                    self.state = 712
                    self.columnArgList()


                self.state = 715
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 717
                self.hogqlxTagElement()
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 718
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 719
                self.match(HogQLParser.DASH)
                self.state = 720
                self.columnExpr(18)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 721
                self.match(HogQLParser.NOT)
                self.state = 722
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5066549581053953) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 79) != 0):
                    self.state = 723
                    self.tableIdentifier()
                    self.state = 724
                    self.match(HogQLParser.DOT)


                self.state = 728
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 729
                self.match(HogQLParser.LPAREN)
                self.state = 730
                self.selectUnionStmt()
                self.state = 731
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 733
                self.match(HogQLParser.LPAREN)
                self.state = 734
                self.columnExpr(0)
                self.state = 735
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 737
                self.match(HogQLParser.LPAREN)
                self.state = 738
                self.columnExprList()
                self.state = 739
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 741
                self.match(HogQLParser.LBRACKET)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                    self.state = 742
                    self.columnExprList()


                self.state = 745
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 746
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 840
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 749
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 753
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [205]:
                            self.state = 750
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [241]:
                            self.state = 751
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [230]:
                            self.state = 752
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 755
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 756
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 760
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [231]:
                            self.state = 757
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [211]:
                            self.state = 758
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [210]:
                            self.state = 759
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 762
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 763
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 788
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                        if la_ == 1:
                            self.state = 764
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 765
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 766
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 767
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 768
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 769
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 770
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 772
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==115:
                                self.state = 771
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 774
                            self.match(HogQLParser.IN)
                            self.state = 776
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==25:
                                self.state = 775
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 779
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==115:
                                self.state = 778
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 781
                            _la = self._input.LA(1)
                            if not(_la==79 or _la==98):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 782
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 783
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 784
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 785
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 786
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 787
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 790
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 791
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 792
                        self.match(HogQLParser.NULLISH)
                        self.state = 793
                        self.columnExpr(14)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 794
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 795
                        self.match(HogQLParser.AND)
                        self.state = 796
                        self.columnExpr(12)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 797
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 798
                        self.match(HogQLParser.OR)
                        self.state = 799
                        self.columnExpr(11)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 800
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 801
                            self.match(HogQLParser.NOT)


                        self.state = 804
                        self.match(HogQLParser.BETWEEN)
                        self.state = 805
                        self.columnExpr(0)
                        self.state = 806
                        self.match(HogQLParser.AND)
                        self.state = 807
                        self.columnExpr(10)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 809
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 810
                        self.match(HogQLParser.QUERY)
                        self.state = 811
                        self.columnExpr(0)
                        self.state = 812
                        self.match(HogQLParser.COLON)
                        self.state = 813
                        self.columnExpr(8)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 815
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 816
                        self.match(HogQLParser.LBRACKET)
                        self.state = 817
                        self.columnExpr(0)
                        self.state = 818
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 820
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 821
                        self.match(HogQLParser.DOT)
                        self.state = 822
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 823
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 824
                        self.match(HogQLParser.DOT)
                        self.state = 825
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 826
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 827
                        self.match(HogQLParser.IS)
                        self.state = 829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 828
                            self.match(HogQLParser.NOT)


                        self.state = 831
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 832
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 838
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                        if la_ == 1:
                            self.state = 833
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 834
                            self.match(HogQLParser.AS)
                            self.state = 835
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 836
                            self.match(HogQLParser.AS)
                            self.state = 837
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.columnArgExpr()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==209:
                self.state = 846
                self.match(HogQLParser.COMMA)
                self.state = 847
                self.columnArgExpr()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_columnArgExpr)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [223]:
                self.state = 857
                self.match(HogQLParser.LPAREN)
                self.state = 858
                self.identifier()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==209:
                    self.state = 859
                    self.match(HogQLParser.COMMA)
                    self.state = 860
                    self.identifier()
                    self.state = 865
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 866
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 198]:
                self.state = 868
                self.identifier()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==209:
                    self.state = 869
                    self.match(HogQLParser.COMMA)
                    self.state = 870
                    self.identifier()
                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 878
            self.match(HogQLParser.ARROW)
            self.state = 879
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.match(HogQLParser.LT)
                self.state = 882
                self.identifier()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5066549581053953) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 79) != 0):
                    self.state = 883
                    self.hogqlxTagAttribute()
                    self.state = 888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 889
                self.match(HogQLParser.SLASH)
                self.state = 890
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.match(HogQLParser.LT)
                self.state = 893
                self.identifier()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5066549581053953) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 79) != 0):
                    self.state = 894
                    self.hogqlxTagAttribute()
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 900
                self.match(HogQLParser.GT)
                self.state = 902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.hogqlxTagElement()


                self.state = 904
                self.match(HogQLParser.LT)
                self.state = 905
                self.match(HogQLParser.SLASH)
                self.state = 906
                self.identifier()
                self.state = 907
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.identifier()
                self.state = 912
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 913
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.identifier()
                self.state = 916
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 917
                self.match(HogQLParser.LBRACE)
                self.state = 918
                self.columnExpr(0)
                self.state = 919
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 921
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.withExpr()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==209:
                self.state = 925
                self.match(HogQLParser.COMMA)
                self.state = 926
                self.withExpr()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_withExpr)
        try:
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.identifier()
                self.state = 933
                self.match(HogQLParser.AS)
                self.state = 934
                self.match(HogQLParser.LPAREN)
                self.state = 935
                self.selectUnionStmt()
                self.state = 936
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.columnExpr(0)
                self.state = 939
                self.match(HogQLParser.AS)
                self.state = 940
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_columnIdentifier)
        try:
            self.state = 951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [221]:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.placeholder()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.tableIdentifier()
                    self.state = 946
                    self.match(HogQLParser.DOT)


                self.state = 950
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.identifier()
            self.state = 958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 954
                    self.match(HogQLParser.DOT)
                    self.state = 955
                    self.identifier() 
                self.state = 960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 962
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 963
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 964
                self.match(HogQLParser.LPAREN)
                self.state = 965
                self.selectUnionStmt()
                self.state = 966
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 968
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 969
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 972
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 976
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [36, 62, 77, 91, 198]:
                        self.state = 973
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 974
                        self.match(HogQLParser.AS)
                        self.state = 975
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.identifier()
            self.state = 984
            self.match(HogQLParser.LPAREN)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4647714815446351881) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 562106478543) != 0):
                self.state = 985
                self.tableArgList()


            self.state = 988
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 990
                self.databaseIdentifier()
                self.state = 991
                self.match(HogQLParser.DOT)


            self.state = 995
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.columnExpr(0)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==209:
                self.state = 998
                self.match(HogQLParser.COMMA)
                self.state = 999
                self.columnExpr(0)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [199]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.match(HogQLParser.DOT)
                self.state = 1009
                _la = self._input.LA(1)
                if not(_la==200 or _la==201):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1010
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1011
                self.match(HogQLParser.DOT)
                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1012
                    _la = self._input.LA(1)
                    if not(_la==200 or _la==201):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==211 or _la==231:
                self.state = 1017
                _la = self._input.LA(1)
                if not(_la==211 or _la==231):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1020
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1021
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1022
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1023
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1024
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1025
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_literal)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 113, 199, 200, 201, 202, 211, 213, 231]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.numberLiteral()
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1030
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            _la = self._input.LA(1)
            if not(_la==37 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 72057615512764417) != 0) or ((((_la - 146)) & ~0x3f) == 0 and ((1 << (_la - 146)) & 142936511610881) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(HogQLParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(HogQLParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ALTER(self):
            return self.getToken(HogQLParser.ALTER, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def AST(self):
            return self.getToken(HogQLParser.AST, 0)

        def ASYNC(self):
            return self.getToken(HogQLParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(HogQLParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(HogQLParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(HogQLParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(HogQLParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(HogQLParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(HogQLParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(HogQLParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(HogQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(HogQLParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(HogQLParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(HogQLParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(HogQLParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(HogQLParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(HogQLParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(HogQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(HogQLParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(HogQLParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(HogQLParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(HogQLParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(HogQLParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(HogQLParser.DROP, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def ENGINE(self):
            return self.getToken(HogQLParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(HogQLParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(HogQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(HogQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(HogQLParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(HogQLParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(HogQLParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(HogQLParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(HogQLParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HogQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(HogQLParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(HogQLParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(HogQLParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(HogQLParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(HogQLParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(HogQLParser.INTO, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(HogQLParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(HogQLParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(HogQLParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def KILL(self):
            return self.getToken(HogQLParser.KILL, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(HogQLParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(HogQLParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(HogQLParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(HogQLParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(HogQLParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(HogQLParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(HogQLParser.MAX, 0)

        def MERGES(self):
            return self.getToken(HogQLParser.MERGES, 0)

        def MIN(self):
            return self.getToken(HogQLParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(HogQLParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(HogQLParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(HogQLParser.MUTATION, 0)

        def NO(self):
            return self.getToken(HogQLParser.NO, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(HogQLParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(HogQLParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(HogQLParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(HogQLParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(HogQLParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(HogQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(HogQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HogQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(HogQLParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(HogQLParser.REPLICATED, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(HogQLParser.SENDS, 0)

        def SET(self):
            return self.getToken(HogQLParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HogQLParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(HogQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(HogQLParser.START, 0)

        def STOP(self):
            return self.getToken(HogQLParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(HogQLParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(HogQLParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(HogQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(HogQLParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(HogQLParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(HogQLParser.TEST, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(HogQLParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def TTL(self):
            return self.getToken(HogQLParser.TTL, 0)

        def TYPE(self):
            return self.getToken(HogQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(HogQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(HogQLParser.USE, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def UUID(self):
            return self.getToken(HogQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(HogQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(HogQLParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(HogQLParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(HogQLParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -137472507908) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5154510511280129) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5224175567750037529) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            _la = self._input.LA(1)
            if not(((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 36030996109328385) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alias)
        try:
            self.state = 1041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [198]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [36, 62, 77, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_identifier)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [198]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [37, 76, 108, 110, 132, 146, 187, 193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.interval()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 195]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1045
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 1049
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1050
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(HogQLParser.LBRACE)
            self.state = 1053
            self.identifier()
            self.state = 1054
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[28] = self.joinExpr_sempred
        self._predicates[47] = self.columnExpr_sempred
        self._predicates[57] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         




